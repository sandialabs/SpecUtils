/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.2.0
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


#define SWIG_VERSION 0x040200
#define SWIGCSHARP

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif

#if __cplusplus >=201103L
# define SWIG_NULLPTR nullptr
#else
# define SWIG_NULLPTR NULL
#endif 


/* C99 and C++11 should provide snprintf, but define SWIG_NO_SNPRINTF
 * if you're missing it.
 */
#if ((defined __STDC_VERSION__ && __STDC_VERSION__ >= 199901L) || \
     (defined __cplusplus && __cplusplus >= 201103L) || \
     defined SWIG_HAVE_SNPRINTF) && \
    !defined SWIG_NO_SNPRINTF
# define SWIG_snprintf(O,S,F,A) snprintf(O,S,F,A)
# define SWIG_snprintf2(O,S,F,A,B) snprintf(O,S,F,A,B)
#else
/* Fallback versions ignore the buffer size, but most of our uses either have a
 * fixed maximum possible size or dynamically allocate a buffer that's large
 * enough.
 */
# define SWIG_snprintf(O,S,F,A) sprintf(O,F,A)
# define SWIG_snprintf2(O,S,F,A,B) sprintf(O,F,A,B)
#endif



#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_SpecUtilsWrap(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_SpecUtilsWrap(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_SpecUtilsWrap(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) do { if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } } while (0)

/* SWIG Errors applicable to all language modules, values are reserved from -1 to -99 */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



/* Callback for returning strings to C# without leaking memory */
typedef void * (SWIGSTDCALL* SWIG_CSharpWStringHelperCallback)(const wchar_t *, int length);
static SWIG_CSharpWStringHelperCallback SWIG_csharp_wstring_with_length_callback = NULL;


#ifdef __cplusplus
extern "C"
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterWStringCallback_SpecUtilsWrap(SWIG_CSharpWStringHelperCallback callback_utf16, SWIG_CSharpWStringHelperCallback callback_utf32) {
  SWIG_csharp_wstring_with_length_callback = sizeof(wchar_t) == 2 ? callback_utf16 : callback_utf32;
}


/* Callback for returning strings to C# without leaking memory */
typedef void (SWIGSTDCALL* SWIG_CSharpWStringExceptionHelperCallback)(const wchar_t *, int length);
static SWIG_CSharpWStringExceptionHelperCallback SWIG_csharp_ApplicationException_callback = NULL;


#ifdef __cplusplus
extern "C"
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterWStringExceptionCallback_SpecUtilsWrap(SWIG_CSharpWStringExceptionHelperCallback callback_utf16, SWIG_CSharpWStringExceptionHelperCallback callback_utf32) {
  SWIG_csharp_ApplicationException_callback = sizeof(wchar_t) == 2 ? callback_utf16 : callback_utf32;
}


#ifdef __cplusplus
#include <utility>
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigSmartPointer {
    T *ptr;
    SwigSmartPointer(T *p) : ptr(p) { }
    ~SwigSmartPointer() { delete ptr; }
    SwigSmartPointer& operator=(SwigSmartPointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
    void reset(T *p) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = p; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigSmartPointer tmp(new T(t)); pointer = tmp; return *this; }
#if __cplusplus >=201103L
  SwigValueWrapper& operator=(T&& t) { SwigSmartPointer tmp(new T(std::move(t))); pointer = tmp; return *this; }
  operator T&&() const { return std::move(*pointer.ptr); }
#else
  operator T&() const { return *pointer.ptr; }
#endif
  T *operator&() const { return pointer.ptr; }
  static void reset(SwigValueWrapper& t, T *p) { t.pointer.reset(p); }
};

/*
 * SwigValueInit() is a generic initialisation solution as the following approach:
 * 
 *       T c_result = T();
 * 
 * doesn't compile for all types for example:
 * 
 *       unsigned int c_result = unsigned int();
 */
template <typename T> T SwigValueInit() {
  return T();
}

#if __cplusplus >=201103L
# define SWIG_STD_MOVE(OBJ) std::move(OBJ)
#else
# define SWIG_STD_MOVE(OBJ) OBJ
#endif

#endif


#include <SpecUtils/SpecFile.h>
#include <SpecUtils/ParseUtils.h>
#include <SpecUtils/EnergyCalibration.h>
#include <SpecUtils/DateTime.h>
#include <SpecUtils/StringAlgo.h>
#include <SpecUtils/Filesystem.h>


#include <typeinfo>
#include <stdexcept>


#include <string>


#include <vector>
#include <algorithm>
#include <stdexcept>


#include <map>
#include <algorithm>
#include <stdexcept>


SWIGINTERN void SWIG_CSharpException(int code, const char *msg) {
  if (code == SWIG_ValueError) {
    SWIG_CSharpExceptionArgumentCodes exception_code = SWIG_CSharpArgumentOutOfRangeException;
    SWIG_CSharpSetPendingExceptionArgument(exception_code, msg, 0);
  } else {
    SWIG_CSharpExceptionCodes exception_code = SWIG_CSharpApplicationException;
    switch(code) {
    case SWIG_MemoryError:
      exception_code = SWIG_CSharpOutOfMemoryException;
      break;
    case SWIG_IndexError:
      exception_code = SWIG_CSharpIndexOutOfRangeException;
      break;
    case SWIG_DivisionByZero:
      exception_code = SWIG_CSharpDivideByZeroException;
      break;
    case SWIG_IOError:
      exception_code = SWIG_CSharpIOException;
      break;
    case SWIG_OverflowError:
      exception_code = SWIG_CSharpOverflowException;
      break;
    case SWIG_RuntimeError:
    case SWIG_TypeError:
    case SWIG_SyntaxError:
    case SWIG_SystemError:
    case SWIG_UnknownError:
    default:
      exception_code = SWIG_CSharpApplicationException;
      break;
    }
    SWIG_CSharpSetPendingException(exception_code, msg);
  }
}


#include <typeinfo>
#include <stdexcept>


#include <utility>

SWIGINTERN std::vector< float > *new_std_vector_Sl_float_Sg___SWIG_2(int capacity){
        std::vector< float >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< float >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN float std_vector_Sl_float_Sg__getitemcopy(std::vector< float > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< float >::value_type const &std_vector_Sl_float_Sg__getitem(std::vector< float > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_float_Sg__setitem(std::vector< float > *self,int index,float const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_float_Sg__AddRange(std::vector< float > *self,std::vector< float > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< float > *std_vector_Sl_float_Sg__GetRange(std::vector< float > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< float >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_float_Sg__Insert(std::vector< float > *self,int index,float const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_float_Sg__InsertRange(std::vector< float > *self,int index,std::vector< float > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_float_Sg__RemoveAt(std::vector< float > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_float_Sg__RemoveRange(std::vector< float > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< float > *std_vector_Sl_float_Sg__Repeat(float const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< float >(count, value);
      }
SWIGINTERN void std_vector_Sl_float_Sg__Reverse__SWIG_0(std::vector< float > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_float_Sg__Reverse__SWIG_1(std::vector< float > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_float_Sg__SetRange(std::vector< float > *self,int index,std::vector< float > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool std_vector_Sl_float_Sg__Contains(std::vector< float > *self,float const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int std_vector_Sl_float_Sg__IndexOf(std::vector< float > *self,float const &value){
        int index = -1;
        std::vector< float >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int std_vector_Sl_float_Sg__LastIndexOf(std::vector< float > *self,float const &value){
        int index = -1;
        std::vector< float >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN bool std_vector_Sl_float_Sg__Remove(std::vector< float > *self,float const &value){
        std::vector< float >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end()) {
          self->erase(it);
          return true;
        }
        return false;
      }
SWIGINTERN std::vector< SpecUtils::Measurement > *new_std_vector_Sl_SpecUtils_Measurement_Sg___SWIG_2(int capacity){
        std::vector< SpecUtils::Measurement >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< SpecUtils::Measurement >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN SpecUtils::Measurement std_vector_Sl_SpecUtils_Measurement_Sg__getitemcopy(std::vector< SpecUtils::Measurement > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< SpecUtils::Measurement >::value_type const &std_vector_Sl_SpecUtils_Measurement_Sg__getitem(std::vector< SpecUtils::Measurement > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_SpecUtils_Measurement_Sg__setitem(std::vector< SpecUtils::Measurement > *self,int index,SpecUtils::Measurement const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_SpecUtils_Measurement_Sg__AddRange(std::vector< SpecUtils::Measurement > *self,std::vector< SpecUtils::Measurement > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< SpecUtils::Measurement > *std_vector_Sl_SpecUtils_Measurement_Sg__GetRange(std::vector< SpecUtils::Measurement > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< SpecUtils::Measurement >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_SpecUtils_Measurement_Sg__Insert(std::vector< SpecUtils::Measurement > *self,int index,SpecUtils::Measurement const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_SpecUtils_Measurement_Sg__InsertRange(std::vector< SpecUtils::Measurement > *self,int index,std::vector< SpecUtils::Measurement > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_SpecUtils_Measurement_Sg__RemoveAt(std::vector< SpecUtils::Measurement > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_SpecUtils_Measurement_Sg__RemoveRange(std::vector< SpecUtils::Measurement > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< SpecUtils::Measurement > *std_vector_Sl_SpecUtils_Measurement_Sg__Repeat(SpecUtils::Measurement const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< SpecUtils::Measurement >(count, value);
      }
SWIGINTERN void std_vector_Sl_SpecUtils_Measurement_Sg__Reverse__SWIG_0(std::vector< SpecUtils::Measurement > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_SpecUtils_Measurement_Sg__Reverse__SWIG_1(std::vector< SpecUtils::Measurement > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_SpecUtils_Measurement_Sg__SetRange(std::vector< SpecUtils::Measurement > *self,int index,std::vector< SpecUtils::Measurement > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }

#include <wchar.h>
#include <limits.h>
#ifndef WCHAR_MIN
#  define WCHAR_MIN 0
#endif
#ifndef WCHAR_MAX
#  define WCHAR_MAX 65535
#endif


static void * SWIG_csharp_wstring_callback(const wchar_t *s) {
  return SWIG_csharp_wstring_with_length_callback(s, (int)wcslen(s));
}


struct SWIG_null_deleter {
  void operator() (void const *) const {
  }
};
#define SWIG_NO_NULL_DELETER_0 , SWIG_null_deleter()
#define SWIG_NO_NULL_DELETER_1
#define SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW
#define SWIG_NO_NULL_DELETER_SWIG_POINTER_OWN

SWIGINTERN float SpecUtils_Measurement_gamma_count_at(SpecUtils::Measurement *self,int index){
        return self->gamma_counts()->at(index-1);
    }
SWIGINTERN size_t SpecUtils_Measurement_get_num_channels(SpecUtils::Measurement *self){
        return self->gamma_counts()->size();
    }
SWIGINTERN std::string SpecUtils_Measurement_get_start_time_string(SpecUtils::Measurement *self){
        auto timeStr = SpecUtils::to_vax_string( self->start_time() );
        return timeStr;
    }
SWIGINTERN void SpecUtils_Measurement_set_start_time_from_string(SpecUtils::Measurement *self,std::string time_str){
        auto tp = SpecUtils::time_from_string(time_str);
        self->set_start_time(tp);
    }
SWIGINTERN void SpecUtils_Measurement_set_neutron_count(SpecUtils::Measurement *self,float count){
        SpecUtils::FloatVec ncounts{count};
        self->set_neutron_counts(ncounts, 0.0F);
    }
SWIGINTERN float SpecUtils_Measurement_get_neutron_count(SpecUtils::Measurement *self){
        auto count = 0.0F;
        if (!self->neutron_counts().empty())
            count = self->neutron_counts().front();

        return count;            
    }
SWIGINTERN std::shared_ptr< SpecUtils::Measurement const > SpecUtils_SpecFile_measurement_at(SpecUtils::SpecFile *self,int index){
        auto newIndex = static_cast<size_t>(index-1);
        return self->measurement(newIndex);
    }
SWIGINTERN int SpecUtils_SpecFile_get_max_channel_count(SpecUtils::SpecFile *self){
        auto maxCount = 0;
        auto numMeasurements = self->num_measurements();

        for(int i = 0; i < numMeasurements; i++)
        {
            auto m = self->measurement(i);
            auto numChannels = static_cast<int>(m->num_gamma_channels());
            maxCount = std::max(maxCount, numChannels);
        }

        return maxCount;            
    }
SWIGINTERN std::vector< std::pair< float,float > > *new_std_vector_Sl_std_pair_Sl_float_Sc_float_Sg__Sg___SWIG_2(int capacity){
        std::vector< std::pair< float,float > >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< std::pair< float,float > >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN std::pair< float,float > std_vector_Sl_std_pair_Sl_float_Sc_float_Sg__Sg__getitemcopy(std::vector< std::pair< float,float > > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< std::pair< float,float > >::value_type const &std_vector_Sl_std_pair_Sl_float_Sc_float_Sg__Sg__getitem(std::vector< std::pair< float,float > > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_pair_Sl_float_Sc_float_Sg__Sg__setitem(std::vector< std::pair< float,float > > *self,int index,std::pair< float,float > const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_pair_Sl_float_Sc_float_Sg__Sg__AddRange(std::vector< std::pair< float,float > > *self,std::vector< std::pair< float,float > > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< std::pair< float,float > > *std_vector_Sl_std_pair_Sl_float_Sc_float_Sg__Sg__GetRange(std::vector< std::pair< float,float > > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< std::pair< float,float > >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_std_pair_Sl_float_Sc_float_Sg__Sg__Insert(std::vector< std::pair< float,float > > *self,int index,std::pair< float,float > const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_pair_Sl_float_Sc_float_Sg__Sg__InsertRange(std::vector< std::pair< float,float > > *self,int index,std::vector< std::pair< float,float > > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_pair_Sl_float_Sc_float_Sg__Sg__RemoveAt(std::vector< std::pair< float,float > > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_pair_Sl_float_Sc_float_Sg__Sg__RemoveRange(std::vector< std::pair< float,float > > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< std::pair< float,float > > *std_vector_Sl_std_pair_Sl_float_Sc_float_Sg__Sg__Repeat(std::pair< float,float > const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< std::pair< float,float > >(count, value);
      }
SWIGINTERN void std_vector_Sl_std_pair_Sl_float_Sc_float_Sg__Sg__Reverse__SWIG_0(std::vector< std::pair< float,float > > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_std_pair_Sl_float_Sc_float_Sg__Sg__Reverse__SWIG_1(std::vector< std::pair< float,float > > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_std_pair_Sl_float_Sc_float_Sg__Sg__SetRange(std::vector< std::pair< float,float > > *self,int index,std::vector< std::pair< float,float > > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }

#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void * SWIGSTDCALL CSharp_SandiafSpecUtils_new_FloatVector__SWIG_0___() {
  void * jresult ;
  std::vector< float > *result = 0 ;
  
  result = (std::vector< float > *)new std::vector< float >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SandiafSpecUtils_new_FloatVector__SWIG_1___(void * jarg1) {
  void * jresult ;
  std::vector< float > *arg1 = 0 ;
  std::vector< float > *result = 0 ;
  
  arg1 = (std::vector< float > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< float > const & is null", 0);
    return 0;
  } 
  result = (std::vector< float > *)new std::vector< float >((std::vector< float > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_FloatVector_Clear___(void * jarg1) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  
  arg1 = (std::vector< float > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_FloatVector_Add___(void * jarg1, float jarg2) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  
  arg1 = (std::vector< float > *)jarg1; 
  temp2 = (float)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((float const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_SandiafSpecUtils_FloatVector_size___(void * jarg1) {
  unsigned long jresult ;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float >::size_type result;
  
  arg1 = (std::vector< float > *)jarg1; 
  result = ((std::vector< float > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SandiafSpecUtils_FloatVector_empty___(void * jarg1) {
  unsigned int jresult ;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  bool result;
  
  arg1 = (std::vector< float > *)jarg1; 
  result = (bool)((std::vector< float > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_SandiafSpecUtils_FloatVector_capacity___(void * jarg1) {
  unsigned long jresult ;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float >::size_type result;
  
  arg1 = (std::vector< float > *)jarg1; 
  result = ((std::vector< float > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_FloatVector_reserve___(void * jarg1, unsigned long jarg2) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float >::size_type arg2 ;
  
  arg1 = (std::vector< float > *)jarg1; 
  arg2 = (std::vector< float >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SandiafSpecUtils_new_FloatVector__SWIG_2___(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< float > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< float > *)new_std_vector_Sl_float_Sg___SWIG_2(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_SandiafSpecUtils_FloatVector_getitemcopy___(void * jarg1, int jarg2) {
  float jresult ;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  int arg2 ;
  float result;
  
  arg1 = (std::vector< float > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (float)std_vector_Sl_float_Sg__getitemcopy(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_SandiafSpecUtils_FloatVector_getitem___(void * jarg1, int jarg2) {
  float jresult ;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  int arg2 ;
  std::vector< float >::value_type *result = 0 ;
  
  arg1 = (std::vector< float > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< float >::value_type *) &std_vector_Sl_float_Sg__getitem(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_FloatVector_setitem___(void * jarg1, int jarg2, float jarg3) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  int arg2 ;
  float *arg3 = 0 ;
  float temp3 ;
  
  arg1 = (std::vector< float > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (float)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_float_Sg__setitem(arg1,arg2,(float const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_FloatVector_AddRange___(void * jarg1, void * jarg2) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float > *arg2 = 0 ;
  
  arg1 = (std::vector< float > *)jarg1; 
  arg2 = (std::vector< float > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< float > const & is null", 0);
    return ;
  } 
  std_vector_Sl_float_Sg__AddRange(arg1,(std::vector< float > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SandiafSpecUtils_FloatVector_GetRange___(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< float > *result = 0 ;
  
  arg1 = (std::vector< float > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< float > *)std_vector_Sl_float_Sg__GetRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_FloatVector_Insert___(void * jarg1, int jarg2, float jarg3) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  int arg2 ;
  float *arg3 = 0 ;
  float temp3 ;
  
  arg1 = (std::vector< float > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (float)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_float_Sg__Insert(arg1,arg2,(float const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_FloatVector_InsertRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  int arg2 ;
  std::vector< float > *arg3 = 0 ;
  
  arg1 = (std::vector< float > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< float > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< float > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_float_Sg__InsertRange(arg1,arg2,(std::vector< float > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_FloatVector_RemoveAt___(void * jarg1, int jarg2) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< float > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_float_Sg__RemoveAt(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_FloatVector_RemoveRange___(void * jarg1, int jarg2, int jarg3) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< float > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_float_Sg__RemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SandiafSpecUtils_FloatVector_Repeat___(float jarg1, int jarg2) {
  void * jresult ;
  float *arg1 = 0 ;
  int arg2 ;
  float temp1 ;
  std::vector< float > *result = 0 ;
  
  temp1 = (float)jarg1; 
  arg1 = &temp1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< float > *)std_vector_Sl_float_Sg__Repeat((float const &)*arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_FloatVector_Reverse__SWIG_0___(void * jarg1) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  
  arg1 = (std::vector< float > *)jarg1; 
  std_vector_Sl_float_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_FloatVector_Reverse__SWIG_1___(void * jarg1, int jarg2, int jarg3) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< float > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_float_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_FloatVector_SetRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  int arg2 ;
  std::vector< float > *arg3 = 0 ;
  
  arg1 = (std::vector< float > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< float > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< float > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_float_Sg__SetRange(arg1,arg2,(std::vector< float > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SandiafSpecUtils_FloatVector_Contains___(void * jarg1, float jarg2) {
  unsigned int jresult ;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  bool result;
  
  arg1 = (std::vector< float > *)jarg1; 
  temp2 = (float)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_vector_Sl_float_Sg__Contains(arg1,(float const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SandiafSpecUtils_FloatVector_IndexOf___(void * jarg1, float jarg2) {
  int jresult ;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  int result;
  
  arg1 = (std::vector< float > *)jarg1; 
  temp2 = (float)jarg2; 
  arg2 = &temp2; 
  result = (int)std_vector_Sl_float_Sg__IndexOf(arg1,(float const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SandiafSpecUtils_FloatVector_LastIndexOf___(void * jarg1, float jarg2) {
  int jresult ;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  int result;
  
  arg1 = (std::vector< float > *)jarg1; 
  temp2 = (float)jarg2; 
  arg2 = &temp2; 
  result = (int)std_vector_Sl_float_Sg__LastIndexOf(arg1,(float const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SandiafSpecUtils_FloatVector_Remove___(void * jarg1, float jarg2) {
  unsigned int jresult ;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  bool result;
  
  arg1 = (std::vector< float > *)jarg1; 
  temp2 = (float)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_vector_Sl_float_Sg__Remove(arg1,(float const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_delete_FloatVector___(void * jarg1) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  
  arg1 = (std::vector< float > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SandiafSpecUtils_new_MeasurementVector__SWIG_0___() {
  void * jresult ;
  std::vector< SpecUtils::Measurement > *result = 0 ;
  
  result = (std::vector< SpecUtils::Measurement > *)new std::vector< SpecUtils::Measurement >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SandiafSpecUtils_new_MeasurementVector__SWIG_1___(void * jarg1) {
  void * jresult ;
  std::vector< SpecUtils::Measurement > *arg1 = 0 ;
  std::vector< SpecUtils::Measurement > *result = 0 ;
  
  arg1 = (std::vector< SpecUtils::Measurement > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< SpecUtils::Measurement > const & is null", 0);
    return 0;
  } 
  result = (std::vector< SpecUtils::Measurement > *)new std::vector< SpecUtils::Measurement >((std::vector< SpecUtils::Measurement > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_MeasurementVector_Clear___(void * jarg1) {
  std::vector< SpecUtils::Measurement > *arg1 = (std::vector< SpecUtils::Measurement > *) 0 ;
  
  arg1 = (std::vector< SpecUtils::Measurement > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_MeasurementVector_Add___(void * jarg1, void * jarg2) {
  std::vector< SpecUtils::Measurement > *arg1 = (std::vector< SpecUtils::Measurement > *) 0 ;
  SpecUtils::Measurement *arg2 = 0 ;
  
  arg1 = (std::vector< SpecUtils::Measurement > *)jarg1; 
  arg2 = (SpecUtils::Measurement *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SpecUtils::Measurement const & is null", 0);
    return ;
  } 
  (arg1)->push_back((SpecUtils::Measurement const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_SandiafSpecUtils_MeasurementVector_size___(void * jarg1) {
  unsigned long jresult ;
  std::vector< SpecUtils::Measurement > *arg1 = (std::vector< SpecUtils::Measurement > *) 0 ;
  std::vector< SpecUtils::Measurement >::size_type result;
  
  arg1 = (std::vector< SpecUtils::Measurement > *)jarg1; 
  result = ((std::vector< SpecUtils::Measurement > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SandiafSpecUtils_MeasurementVector_empty___(void * jarg1) {
  unsigned int jresult ;
  std::vector< SpecUtils::Measurement > *arg1 = (std::vector< SpecUtils::Measurement > *) 0 ;
  bool result;
  
  arg1 = (std::vector< SpecUtils::Measurement > *)jarg1; 
  result = (bool)((std::vector< SpecUtils::Measurement > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_SandiafSpecUtils_MeasurementVector_capacity___(void * jarg1) {
  unsigned long jresult ;
  std::vector< SpecUtils::Measurement > *arg1 = (std::vector< SpecUtils::Measurement > *) 0 ;
  std::vector< SpecUtils::Measurement >::size_type result;
  
  arg1 = (std::vector< SpecUtils::Measurement > *)jarg1; 
  result = ((std::vector< SpecUtils::Measurement > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_MeasurementVector_reserve___(void * jarg1, unsigned long jarg2) {
  std::vector< SpecUtils::Measurement > *arg1 = (std::vector< SpecUtils::Measurement > *) 0 ;
  std::vector< SpecUtils::Measurement >::size_type arg2 ;
  
  arg1 = (std::vector< SpecUtils::Measurement > *)jarg1; 
  arg2 = (std::vector< SpecUtils::Measurement >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SandiafSpecUtils_new_MeasurementVector__SWIG_2___(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< SpecUtils::Measurement > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< SpecUtils::Measurement > *)new_std_vector_Sl_SpecUtils_Measurement_Sg___SWIG_2(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SandiafSpecUtils_MeasurementVector_getitemcopy___(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< SpecUtils::Measurement > *arg1 = (std::vector< SpecUtils::Measurement > *) 0 ;
  int arg2 ;
  SpecUtils::Measurement result;
  
  arg1 = (std::vector< SpecUtils::Measurement > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_SpecUtils_Measurement_Sg__getitemcopy(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = new SpecUtils::Measurement(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SandiafSpecUtils_MeasurementVector_getitem___(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< SpecUtils::Measurement > *arg1 = (std::vector< SpecUtils::Measurement > *) 0 ;
  int arg2 ;
  std::vector< SpecUtils::Measurement >::value_type *result = 0 ;
  
  arg1 = (std::vector< SpecUtils::Measurement > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< SpecUtils::Measurement >::value_type *) &std_vector_Sl_SpecUtils_Measurement_Sg__getitem(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_MeasurementVector_setitem___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< SpecUtils::Measurement > *arg1 = (std::vector< SpecUtils::Measurement > *) 0 ;
  int arg2 ;
  SpecUtils::Measurement *arg3 = 0 ;
  
  arg1 = (std::vector< SpecUtils::Measurement > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (SpecUtils::Measurement *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SpecUtils::Measurement const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_SpecUtils_Measurement_Sg__setitem(arg1,arg2,(SpecUtils::Measurement const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_MeasurementVector_AddRange___(void * jarg1, void * jarg2) {
  std::vector< SpecUtils::Measurement > *arg1 = (std::vector< SpecUtils::Measurement > *) 0 ;
  std::vector< SpecUtils::Measurement > *arg2 = 0 ;
  
  arg1 = (std::vector< SpecUtils::Measurement > *)jarg1; 
  arg2 = (std::vector< SpecUtils::Measurement > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< SpecUtils::Measurement > const & is null", 0);
    return ;
  } 
  std_vector_Sl_SpecUtils_Measurement_Sg__AddRange(arg1,(std::vector< SpecUtils::Measurement > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SandiafSpecUtils_MeasurementVector_GetRange___(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< SpecUtils::Measurement > *arg1 = (std::vector< SpecUtils::Measurement > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< SpecUtils::Measurement > *result = 0 ;
  
  arg1 = (std::vector< SpecUtils::Measurement > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< SpecUtils::Measurement > *)std_vector_Sl_SpecUtils_Measurement_Sg__GetRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_MeasurementVector_Insert___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< SpecUtils::Measurement > *arg1 = (std::vector< SpecUtils::Measurement > *) 0 ;
  int arg2 ;
  SpecUtils::Measurement *arg3 = 0 ;
  
  arg1 = (std::vector< SpecUtils::Measurement > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (SpecUtils::Measurement *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SpecUtils::Measurement const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_SpecUtils_Measurement_Sg__Insert(arg1,arg2,(SpecUtils::Measurement const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_MeasurementVector_InsertRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< SpecUtils::Measurement > *arg1 = (std::vector< SpecUtils::Measurement > *) 0 ;
  int arg2 ;
  std::vector< SpecUtils::Measurement > *arg3 = 0 ;
  
  arg1 = (std::vector< SpecUtils::Measurement > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< SpecUtils::Measurement > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< SpecUtils::Measurement > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_SpecUtils_Measurement_Sg__InsertRange(arg1,arg2,(std::vector< SpecUtils::Measurement > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_MeasurementVector_RemoveAt___(void * jarg1, int jarg2) {
  std::vector< SpecUtils::Measurement > *arg1 = (std::vector< SpecUtils::Measurement > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< SpecUtils::Measurement > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_SpecUtils_Measurement_Sg__RemoveAt(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_MeasurementVector_RemoveRange___(void * jarg1, int jarg2, int jarg3) {
  std::vector< SpecUtils::Measurement > *arg1 = (std::vector< SpecUtils::Measurement > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< SpecUtils::Measurement > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_SpecUtils_Measurement_Sg__RemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SandiafSpecUtils_MeasurementVector_Repeat___(void * jarg1, int jarg2) {
  void * jresult ;
  SpecUtils::Measurement *arg1 = 0 ;
  int arg2 ;
  std::vector< SpecUtils::Measurement > *result = 0 ;
  
  arg1 = (SpecUtils::Measurement *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SpecUtils::Measurement const & is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< SpecUtils::Measurement > *)std_vector_Sl_SpecUtils_Measurement_Sg__Repeat((SpecUtils::Measurement const &)*arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_MeasurementVector_Reverse__SWIG_0___(void * jarg1) {
  std::vector< SpecUtils::Measurement > *arg1 = (std::vector< SpecUtils::Measurement > *) 0 ;
  
  arg1 = (std::vector< SpecUtils::Measurement > *)jarg1; 
  std_vector_Sl_SpecUtils_Measurement_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_MeasurementVector_Reverse__SWIG_1___(void * jarg1, int jarg2, int jarg3) {
  std::vector< SpecUtils::Measurement > *arg1 = (std::vector< SpecUtils::Measurement > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< SpecUtils::Measurement > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_SpecUtils_Measurement_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_MeasurementVector_SetRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< SpecUtils::Measurement > *arg1 = (std::vector< SpecUtils::Measurement > *) 0 ;
  int arg2 ;
  std::vector< SpecUtils::Measurement > *arg3 = 0 ;
  
  arg1 = (std::vector< SpecUtils::Measurement > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< SpecUtils::Measurement > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< SpecUtils::Measurement > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_SpecUtils_Measurement_Sg__SetRange(arg1,arg2,(std::vector< SpecUtils::Measurement > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_delete_MeasurementVector___(void * jarg1) {
  std::vector< SpecUtils::Measurement > *arg1 = (std::vector< SpecUtils::Measurement > *) 0 ;
  
  arg1 = (std::vector< SpecUtils::Measurement > *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SandiafSpecUtils_spectrumTypeFromDescription___(char * jarg1) {
  int jresult ;
  char *arg1 = (char *) 0 ;
  SpecUtils::SpectrumType result;
  
  arg1 = (char *)jarg1; 
  result = (SpecUtils::SpectrumType)SpecUtils::spectrumTypeFromDescription((char const *)arg1);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SandiafSpecUtils_suggestedNameEnding___(int jarg1) {
  char * jresult ;
  SpecUtils::SaveSpectrumAsType arg1 ;
  char *result = 0 ;
  
  arg1 = (SpecUtils::SaveSpectrumAsType)jarg1; 
  result = (char *)SpecUtils::suggestedNameEnding(arg1);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SandiafSpecUtils_is_candidate_n42_file__SWIG_0___(char * jarg1) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  result = (bool)SpecUtils::is_candidate_n42_file((char const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SandiafSpecUtils_is_candidate_n42_file__SWIG_1___(char * jarg1, char * jarg2) {
  unsigned int jresult ;
  char *arg1 = (char *) (char *)0 ;
  char *arg2 = (char *) (char *)0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)SpecUtils::is_candidate_n42_file((char const *)arg1,(char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SandiafSpecUtils_convert_n42_utf16_xml_to_utf8___(char * jarg1, char * jarg2) {
  char * jresult ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  char *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (char *)SpecUtils::convert_n42_utf16_xml_to_utf8(arg1,arg2);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_add_analysis_results_to_2012_N42___(void * jarg1, void * jarg2, void * jarg3) {
  SpecUtils::DetectorAnalysis *arg1 = 0 ;
  ::rapidxml::xml_node< char > *arg2 = (::rapidxml::xml_node< char > *) 0 ;
  std::mutex *arg3 = 0 ;
  
  arg1 = (SpecUtils::DetectorAnalysis *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SpecUtils::DetectorAnalysis const & is null", 0);
    return ;
  } 
  arg2 = (::rapidxml::xml_node< char > *)jarg2; 
  arg3 = (std::mutex *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::mutex & is null", 0);
    return ;
  } 
  SpecUtils::add_analysis_results_to_2012_N42((SpecUtils::DetectorAnalysis const &)*arg1,arg2,*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_set_analysis_info_from_n42___(void * jarg1, void * jarg2) {
  rapidxml::xml_node< char > *arg1 = (rapidxml::xml_node< char > *) 0 ;
  SpecUtils::DetectorAnalysis *arg2 = 0 ;
  
  arg1 = (rapidxml::xml_node< char > *)jarg1; 
  arg2 = (SpecUtils::DetectorAnalysis *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SpecUtils::DetectorAnalysis & is null", 0);
    return ;
  } 
  SpecUtils::set_analysis_info_from_n42((rapidxml::xml_node< char > const *)arg1,*arg2);
}


SWIGEXPORT double SWIGSTDCALL CSharp_SandiafSpecUtils_gamma_integral___(void * jarg1, float jarg2, float jarg3) {
  double jresult ;
  std::shared_ptr< SpecUtils::Measurement const > *arg1 = 0 ;
  float arg2 ;
  float arg3 ;
  std::shared_ptr< SpecUtils::Measurement const > tempnull1 ;
  double result;
  
  arg1 = jarg1 ? (std::shared_ptr< SpecUtils::Measurement const > *)jarg1 : &tempnull1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (double)SpecUtils::gamma_integral((std::shared_ptr< SpecUtils::Measurement const > const &)*arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_SandiafSpecUtils_detectorTypeToString___(int jarg1) {
  const char * jresult ;
  SpecUtils::DetectorType arg1 ;
  std::string *result = 0 ;
  
  arg1 = (SpecUtils::DetectorType)jarg1; 
  result = (std::string *) &SpecUtils::detectorTypeToString(arg1);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SandiafSpecUtils_new_Measurement___() {
  void * jresult ;
  SpecUtils::Measurement *result = 0 ;
  
  result = (SpecUtils::Measurement *)new SpecUtils::Measurement();
  
  jresult = result ? new std::shared_ptr<  SpecUtils::Measurement >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_delete_Measurement___(void * jarg1) {
  SpecUtils::Measurement *arg1 = (SpecUtils::Measurement *) 0 ;
  std::shared_ptr< SpecUtils::Measurement > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  SpecUtils::Measurement > *)jarg1;
  arg1 = (SpecUtils::Measurement *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SandiafSpecUtils_Measurement_memmorysize___(void * jarg1) {
  int jresult ;
  SpecUtils::Measurement *arg1 = (SpecUtils::Measurement *) 0 ;
  std::shared_ptr< SpecUtils::Measurement const > *smartarg1 = 0 ;
  size_t result;
  
  
  smartarg1 = (std::shared_ptr< const SpecUtils::Measurement > *)jarg1;
  arg1 = (SpecUtils::Measurement *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((SpecUtils::Measurement const *)arg1)->memmorysize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_SandiafSpecUtils_Measurement_live_time___(void * jarg1) {
  float jresult ;
  SpecUtils::Measurement *arg1 = (SpecUtils::Measurement *) 0 ;
  std::shared_ptr< SpecUtils::Measurement const > *smartarg1 = 0 ;
  float result;
  
  
  smartarg1 = (std::shared_ptr< const SpecUtils::Measurement > *)jarg1;
  arg1 = (SpecUtils::Measurement *)(smartarg1 ? smartarg1->get() : 0); 
  result = (float)((SpecUtils::Measurement const *)arg1)->live_time();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_Measurement_set_live_time___(void * jarg1, float jarg2) {
  SpecUtils::Measurement *arg1 = (SpecUtils::Measurement *) 0 ;
  float arg2 ;
  std::shared_ptr< SpecUtils::Measurement > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  SpecUtils::Measurement > *)jarg1;
  arg1 = (SpecUtils::Measurement *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (float)jarg2; 
  (arg1)->set_live_time(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_SandiafSpecUtils_Measurement_real_time___(void * jarg1) {
  float jresult ;
  SpecUtils::Measurement *arg1 = (SpecUtils::Measurement *) 0 ;
  std::shared_ptr< SpecUtils::Measurement const > *smartarg1 = 0 ;
  float result;
  
  
  smartarg1 = (std::shared_ptr< const SpecUtils::Measurement > *)jarg1;
  arg1 = (SpecUtils::Measurement *)(smartarg1 ? smartarg1->get() : 0); 
  result = (float)((SpecUtils::Measurement const *)arg1)->real_time();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_Measurement_set_real_time___(void * jarg1, float jarg2) {
  SpecUtils::Measurement *arg1 = (SpecUtils::Measurement *) 0 ;
  float arg2 ;
  std::shared_ptr< SpecUtils::Measurement > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  SpecUtils::Measurement > *)jarg1;
  arg1 = (SpecUtils::Measurement *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (float)jarg2; 
  (arg1)->set_real_time(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SandiafSpecUtils_Measurement_contained_neutron___(void * jarg1) {
  unsigned int jresult ;
  SpecUtils::Measurement *arg1 = (SpecUtils::Measurement *) 0 ;
  std::shared_ptr< SpecUtils::Measurement const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const SpecUtils::Measurement > *)jarg1;
  arg1 = (SpecUtils::Measurement *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)((SpecUtils::Measurement const *)arg1)->contained_neutron();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SandiafSpecUtils_Measurement_sample_number___(void * jarg1) {
  int jresult ;
  SpecUtils::Measurement *arg1 = (SpecUtils::Measurement *) 0 ;
  std::shared_ptr< SpecUtils::Measurement const > *smartarg1 = 0 ;
  int result;
  
  
  smartarg1 = (std::shared_ptr< const SpecUtils::Measurement > *)jarg1;
  arg1 = (SpecUtils::Measurement *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)((SpecUtils::Measurement const *)arg1)->sample_number();
  jresult = result; 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_SandiafSpecUtils_Measurement_title___(void * jarg1) {
  const char * jresult ;
  SpecUtils::Measurement *arg1 = (SpecUtils::Measurement *) 0 ;
  std::shared_ptr< SpecUtils::Measurement const > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const SpecUtils::Measurement > *)jarg1;
  arg1 = (SpecUtils::Measurement *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) &((SpecUtils::Measurement const *)arg1)->title();
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SandiafSpecUtils_Measurement_occupied___(void * jarg1) {
  int jresult ;
  SpecUtils::Measurement *arg1 = (SpecUtils::Measurement *) 0 ;
  std::shared_ptr< SpecUtils::Measurement const > *smartarg1 = 0 ;
  SpecUtils::OccupancyStatus result;
  
  
  smartarg1 = (std::shared_ptr< const SpecUtils::Measurement > *)jarg1;
  arg1 = (SpecUtils::Measurement *)(smartarg1 ? smartarg1->get() : 0); 
  result = (SpecUtils::OccupancyStatus)((SpecUtils::Measurement const *)arg1)->occupied();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_SandiafSpecUtils_Measurement_gamma_count_sum___(void * jarg1) {
  double jresult ;
  SpecUtils::Measurement *arg1 = (SpecUtils::Measurement *) 0 ;
  std::shared_ptr< SpecUtils::Measurement const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const SpecUtils::Measurement > *)jarg1;
  arg1 = (SpecUtils::Measurement *)(smartarg1 ? smartarg1->get() : 0); 
  result = (double)((SpecUtils::Measurement const *)arg1)->gamma_count_sum();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_SandiafSpecUtils_Measurement_neutron_live_time___(void * jarg1) {
  float jresult ;
  SpecUtils::Measurement *arg1 = (SpecUtils::Measurement *) 0 ;
  std::shared_ptr< SpecUtils::Measurement const > *smartarg1 = 0 ;
  float result;
  
  
  smartarg1 = (std::shared_ptr< const SpecUtils::Measurement > *)jarg1;
  arg1 = (SpecUtils::Measurement *)(smartarg1 ? smartarg1->get() : 0); 
  result = (float)((SpecUtils::Measurement const *)arg1)->neutron_live_time();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_SandiafSpecUtils_Measurement_neutron_counts_sum___(void * jarg1) {
  double jresult ;
  SpecUtils::Measurement *arg1 = (SpecUtils::Measurement *) 0 ;
  std::shared_ptr< SpecUtils::Measurement const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const SpecUtils::Measurement > *)jarg1;
  arg1 = (SpecUtils::Measurement *)(smartarg1 ? smartarg1->get() : 0); 
  result = (double)((SpecUtils::Measurement const *)arg1)->neutron_counts_sum();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_SandiafSpecUtils_Measurement_speed___(void * jarg1) {
  float jresult ;
  SpecUtils::Measurement *arg1 = (SpecUtils::Measurement *) 0 ;
  std::shared_ptr< SpecUtils::Measurement const > *smartarg1 = 0 ;
  float result;
  
  
  smartarg1 = (std::shared_ptr< const SpecUtils::Measurement > *)jarg1;
  arg1 = (SpecUtils::Measurement *)(smartarg1 ? smartarg1->get() : 0); 
  result = (float)((SpecUtils::Measurement const *)arg1)->speed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_SandiafSpecUtils_Measurement_dx___(void * jarg1) {
  float jresult ;
  SpecUtils::Measurement *arg1 = (SpecUtils::Measurement *) 0 ;
  std::shared_ptr< SpecUtils::Measurement const > *smartarg1 = 0 ;
  float result;
  
  
  smartarg1 = (std::shared_ptr< const SpecUtils::Measurement > *)jarg1;
  arg1 = (SpecUtils::Measurement *)(smartarg1 ? smartarg1->get() : 0); 
  result = (float)((SpecUtils::Measurement const *)arg1)->dx();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_SandiafSpecUtils_Measurement_dy___(void * jarg1) {
  float jresult ;
  SpecUtils::Measurement *arg1 = (SpecUtils::Measurement *) 0 ;
  std::shared_ptr< SpecUtils::Measurement const > *smartarg1 = 0 ;
  float result;
  
  
  smartarg1 = (std::shared_ptr< const SpecUtils::Measurement > *)jarg1;
  arg1 = (SpecUtils::Measurement *)(smartarg1 ? smartarg1->get() : 0); 
  result = (float)((SpecUtils::Measurement const *)arg1)->dy();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_SandiafSpecUtils_Measurement_latitude___(void * jarg1) {
  double jresult ;
  SpecUtils::Measurement *arg1 = (SpecUtils::Measurement *) 0 ;
  std::shared_ptr< SpecUtils::Measurement const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const SpecUtils::Measurement > *)jarg1;
  arg1 = (SpecUtils::Measurement *)(smartarg1 ? smartarg1->get() : 0); 
  result = (double)((SpecUtils::Measurement const *)arg1)->latitude();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_SandiafSpecUtils_Measurement_longitude___(void * jarg1) {
  double jresult ;
  SpecUtils::Measurement *arg1 = (SpecUtils::Measurement *) 0 ;
  std::shared_ptr< SpecUtils::Measurement const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const SpecUtils::Measurement > *)jarg1;
  arg1 = (SpecUtils::Measurement *)(smartarg1 ? smartarg1->get() : 0); 
  result = (double)((SpecUtils::Measurement const *)arg1)->longitude();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SandiafSpecUtils_Measurement_has_gps_info___(void * jarg1) {
  unsigned int jresult ;
  SpecUtils::Measurement *arg1 = (SpecUtils::Measurement *) 0 ;
  std::shared_ptr< SpecUtils::Measurement const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const SpecUtils::Measurement > *)jarg1;
  arg1 = (SpecUtils::Measurement *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)((SpecUtils::Measurement const *)arg1)->has_gps_info();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_SandiafSpecUtils_Measurement_dose_rate___(void * jarg1) {
  float jresult ;
  SpecUtils::Measurement *arg1 = (SpecUtils::Measurement *) 0 ;
  std::shared_ptr< SpecUtils::Measurement const > *smartarg1 = 0 ;
  float result;
  
  
  smartarg1 = (std::shared_ptr< const SpecUtils::Measurement > *)jarg1;
  arg1 = (SpecUtils::Measurement *)(smartarg1 ? smartarg1->get() : 0); 
  result = (float)((SpecUtils::Measurement const *)arg1)->dose_rate();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_SandiafSpecUtils_Measurement_exposure_rate___(void * jarg1) {
  float jresult ;
  SpecUtils::Measurement *arg1 = (SpecUtils::Measurement *) 0 ;
  std::shared_ptr< SpecUtils::Measurement const > *smartarg1 = 0 ;
  float result;
  
  
  smartarg1 = (std::shared_ptr< const SpecUtils::Measurement > *)jarg1;
  arg1 = (SpecUtils::Measurement *)(smartarg1 ? smartarg1->get() : 0); 
  result = (float)((SpecUtils::Measurement const *)arg1)->exposure_rate();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_SandiafSpecUtils_Measurement_pcf_tag___(void * jarg1) {
  char jresult ;
  SpecUtils::Measurement *arg1 = (SpecUtils::Measurement *) 0 ;
  std::shared_ptr< SpecUtils::Measurement const > *smartarg1 = 0 ;
  char result;
  
  
  smartarg1 = (std::shared_ptr< const SpecUtils::Measurement > *)jarg1;
  arg1 = (SpecUtils::Measurement *)(smartarg1 ? smartarg1->get() : 0); 
  result = (char)((SpecUtils::Measurement const *)arg1)->pcf_tag();
  jresult = result; 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_SandiafSpecUtils_Measurement_source_description___(void * jarg1) {
  const char * jresult ;
  SpecUtils::Measurement *arg1 = (SpecUtils::Measurement *) 0 ;
  std::shared_ptr< SpecUtils::Measurement const > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const SpecUtils::Measurement > *)jarg1;
  arg1 = (SpecUtils::Measurement *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) &((SpecUtils::Measurement const *)arg1)->source_description();
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_SandiafSpecUtils_Measurement_measurement_description___(void * jarg1) {
  const char * jresult ;
  SpecUtils::Measurement *arg1 = (SpecUtils::Measurement *) 0 ;
  std::shared_ptr< SpecUtils::Measurement const > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const SpecUtils::Measurement > *)jarg1;
  arg1 = (SpecUtils::Measurement *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) &((SpecUtils::Measurement const *)arg1)->measurement_description();
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SandiafSpecUtils_Measurement_position_time___(void * jarg1) {
  void * jresult ;
  SpecUtils::Measurement *arg1 = (SpecUtils::Measurement *) 0 ;
  std::shared_ptr< SpecUtils::Measurement const > *smartarg1 = 0 ;
  SpecUtils::time_point_t result;
  
  
  smartarg1 = (std::shared_ptr< const SpecUtils::Measurement > *)jarg1;
  arg1 = (SpecUtils::Measurement *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((SpecUtils::Measurement const *)arg1)->position_time();
  jresult = new SpecUtils::time_point_t(result); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_SandiafSpecUtils_Measurement_detector_name___(void * jarg1) {
  const char * jresult ;
  SpecUtils::Measurement *arg1 = (SpecUtils::Measurement *) 0 ;
  std::shared_ptr< SpecUtils::Measurement const > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const SpecUtils::Measurement > *)jarg1;
  arg1 = (SpecUtils::Measurement *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) &((SpecUtils::Measurement const *)arg1)->detector_name();
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_Measurement_update_detector_name_from_title___(void * jarg1) {
  SpecUtils::Measurement *arg1 = (SpecUtils::Measurement *) 0 ;
  std::shared_ptr< SpecUtils::Measurement > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  SpecUtils::Measurement > *)jarg1;
  arg1 = (SpecUtils::Measurement *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->update_detector_name_from_title();
}


SWIGEXPORT int SWIGSTDCALL CSharp_SandiafSpecUtils_Measurement_detector_number___(void * jarg1) {
  int jresult ;
  SpecUtils::Measurement *arg1 = (SpecUtils::Measurement *) 0 ;
  std::shared_ptr< SpecUtils::Measurement const > *smartarg1 = 0 ;
  int result;
  
  
  smartarg1 = (std::shared_ptr< const SpecUtils::Measurement > *)jarg1;
  arg1 = (SpecUtils::Measurement *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)((SpecUtils::Measurement const *)arg1)->detector_number();
  jresult = result; 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_SandiafSpecUtils_Measurement_detector_type___(void * jarg1) {
  const char * jresult ;
  SpecUtils::Measurement *arg1 = (SpecUtils::Measurement *) 0 ;
  std::shared_ptr< SpecUtils::Measurement const > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const SpecUtils::Measurement > *)jarg1;
  arg1 = (SpecUtils::Measurement *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) &((SpecUtils::Measurement const *)arg1)->detector_type();
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SandiafSpecUtils_Measurement_quality_status___(void * jarg1) {
  int jresult ;
  SpecUtils::Measurement *arg1 = (SpecUtils::Measurement *) 0 ;
  std::shared_ptr< SpecUtils::Measurement const > *smartarg1 = 0 ;
  SpecUtils::QualityStatus result;
  
  
  smartarg1 = (std::shared_ptr< const SpecUtils::Measurement > *)jarg1;
  arg1 = (SpecUtils::Measurement *)(smartarg1 ? smartarg1->get() : 0); 
  result = (SpecUtils::QualityStatus)((SpecUtils::Measurement const *)arg1)->quality_status();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SandiafSpecUtils_Measurement_source_type___(void * jarg1) {
  int jresult ;
  SpecUtils::Measurement *arg1 = (SpecUtils::Measurement *) 0 ;
  std::shared_ptr< SpecUtils::Measurement const > *smartarg1 = 0 ;
  SpecUtils::SourceType result;
  
  
  smartarg1 = (std::shared_ptr< const SpecUtils::Measurement > *)jarg1;
  arg1 = (SpecUtils::Measurement *)(smartarg1 ? smartarg1->get() : 0); 
  result = (SpecUtils::SourceType)((SpecUtils::Measurement const *)arg1)->source_type();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SandiafSpecUtils_Measurement_remarks___(void * jarg1) {
  void * jresult ;
  SpecUtils::Measurement *arg1 = (SpecUtils::Measurement *) 0 ;
  std::shared_ptr< SpecUtils::Measurement const > *smartarg1 = 0 ;
  std::vector< std::string > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const SpecUtils::Measurement > *)jarg1;
  arg1 = (SpecUtils::Measurement *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::vector< std::string > *) &((SpecUtils::Measurement const *)arg1)->remarks();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SandiafSpecUtils_Measurement_mutable_remarks___(void * jarg1) {
  void * jresult ;
  SpecUtils::Measurement *arg1 = (SpecUtils::Measurement *) 0 ;
  std::shared_ptr< SpecUtils::Measurement > *smartarg1 = 0 ;
  std::vector< std::string > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  SpecUtils::Measurement > *)jarg1;
  arg1 = (SpecUtils::Measurement *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::vector< std::string > *) &(arg1)->mutable_remarks();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SandiafSpecUtils_Measurement_parse_warnings___(void * jarg1) {
  void * jresult ;
  SpecUtils::Measurement *arg1 = (SpecUtils::Measurement *) 0 ;
  std::shared_ptr< SpecUtils::Measurement const > *smartarg1 = 0 ;
  std::vector< std::string > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const SpecUtils::Measurement > *)jarg1;
  arg1 = (SpecUtils::Measurement *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::vector< std::string > *) &((SpecUtils::Measurement const *)arg1)->parse_warnings();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SandiafSpecUtils_Measurement_start_time___(void * jarg1) {
  void * jresult ;
  SpecUtils::Measurement *arg1 = (SpecUtils::Measurement *) 0 ;
  std::shared_ptr< SpecUtils::Measurement const > *smartarg1 = 0 ;
  SpecUtils::time_point_t *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const SpecUtils::Measurement > *)jarg1;
  arg1 = (SpecUtils::Measurement *)(smartarg1 ? smartarg1->get() : 0); 
  result = (SpecUtils::time_point_t *) &((SpecUtils::Measurement const *)arg1)->start_time();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SandiafSpecUtils_Measurement_start_time_copy___(void * jarg1) {
  void * jresult ;
  SpecUtils::Measurement *arg1 = (SpecUtils::Measurement *) 0 ;
  std::shared_ptr< SpecUtils::Measurement const > *smartarg1 = 0 ;
  SpecUtils::time_point_t result;
  
  
  smartarg1 = (std::shared_ptr< const SpecUtils::Measurement > *)jarg1;
  arg1 = (SpecUtils::Measurement *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((SpecUtils::Measurement const *)arg1)->start_time_copy();
  jresult = new SpecUtils::time_point_t(result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SandiafSpecUtils_Measurement_energy_calibration_model___(void * jarg1) {
  int jresult ;
  SpecUtils::Measurement *arg1 = (SpecUtils::Measurement *) 0 ;
  std::shared_ptr< SpecUtils::Measurement const > *smartarg1 = 0 ;
  SpecUtils::EnergyCalType result;
  
  
  smartarg1 = (std::shared_ptr< const SpecUtils::Measurement > *)jarg1;
  arg1 = (SpecUtils::Measurement *)(smartarg1 ? smartarg1->get() : 0); 
  result = (SpecUtils::EnergyCalType)((SpecUtils::Measurement const *)arg1)->energy_calibration_model();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SandiafSpecUtils_Measurement_calibration_coeffs___(void * jarg1) {
  void * jresult ;
  SpecUtils::Measurement *arg1 = (SpecUtils::Measurement *) 0 ;
  std::shared_ptr< SpecUtils::Measurement const > *smartarg1 = 0 ;
  std::vector< float > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const SpecUtils::Measurement > *)jarg1;
  arg1 = (SpecUtils::Measurement *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::vector< float > *) &((SpecUtils::Measurement const *)arg1)->calibration_coeffs();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SandiafSpecUtils_Measurement_deviation_pairs___(void * jarg1) {
  void * jresult ;
  SpecUtils::Measurement *arg1 = (SpecUtils::Measurement *) 0 ;
  std::shared_ptr< SpecUtils::Measurement const > *smartarg1 = 0 ;
  std::vector< std::pair< float,float > > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const SpecUtils::Measurement > *)jarg1;
  arg1 = (SpecUtils::Measurement *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::vector< std::pair< float,float > > *) &((SpecUtils::Measurement const *)arg1)->deviation_pairs();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SandiafSpecUtils_Measurement_energy_calibration___(void * jarg1) {
  void * jresult ;
  SpecUtils::Measurement *arg1 = (SpecUtils::Measurement *) 0 ;
  std::shared_ptr< SpecUtils::Measurement const > *smartarg1 = 0 ;
  std::shared_ptr< SpecUtils::EnergyCalibration const > result;
  
  
  smartarg1 = (std::shared_ptr< const SpecUtils::Measurement > *)jarg1;
  arg1 = (SpecUtils::Measurement *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((SpecUtils::Measurement const *)arg1)->energy_calibration();
  jresult = result ? new std::shared_ptr< SpecUtils::EnergyCalibration const >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SandiafSpecUtils_Measurement_mutable_energy_calibration___(void * jarg1) {
  void * jresult ;
  SpecUtils::Measurement *arg1 = (SpecUtils::Measurement *) 0 ;
  std::shared_ptr< SpecUtils::Measurement > *smartarg1 = 0 ;
  std::shared_ptr< SpecUtils::EnergyCalibration const > result;
  
  
  smartarg1 = (std::shared_ptr<  SpecUtils::Measurement > *)jarg1;
  arg1 = (SpecUtils::Measurement *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->mutable_energy_calibration();
  jresult = result ? new std::shared_ptr< SpecUtils::EnergyCalibration const >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SandiafSpecUtils_Measurement_channel_energies___(void * jarg1) {
  void * jresult ;
  SpecUtils::Measurement *arg1 = (SpecUtils::Measurement *) 0 ;
  std::shared_ptr< SpecUtils::Measurement const > *smartarg1 = 0 ;
  std::shared_ptr< std::vector< float > const > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const SpecUtils::Measurement > *)jarg1;
  arg1 = (SpecUtils::Measurement *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::shared_ptr< std::vector< float > const > *) &((SpecUtils::Measurement const *)arg1)->channel_energies();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SandiafSpecUtils_Measurement_gamma_counts___(void * jarg1) {
  void * jresult ;
  SpecUtils::Measurement *arg1 = (SpecUtils::Measurement *) 0 ;
  std::shared_ptr< SpecUtils::Measurement const > *smartarg1 = 0 ;
  std::shared_ptr< std::vector< float > const > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const SpecUtils::Measurement > *)jarg1;
  arg1 = (SpecUtils::Measurement *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::shared_ptr< std::vector< float > const > *) &((SpecUtils::Measurement const *)arg1)->gamma_counts();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SandiafSpecUtils_Measurement_neutron_counts___(void * jarg1) {
  void * jresult ;
  SpecUtils::Measurement *arg1 = (SpecUtils::Measurement *) 0 ;
  std::shared_ptr< SpecUtils::Measurement const > *smartarg1 = 0 ;
  std::vector< float > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const SpecUtils::Measurement > *)jarg1;
  arg1 = (SpecUtils::Measurement *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::vector< float > *) &((SpecUtils::Measurement const *)arg1)->neutron_counts();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SandiafSpecUtils_Measurement_location_state___(void * jarg1) {
  void * jresult ;
  SpecUtils::Measurement *arg1 = (SpecUtils::Measurement *) 0 ;
  std::shared_ptr< SpecUtils::Measurement const > *smartarg1 = 0 ;
  std::shared_ptr< SpecUtils::LocationState const > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const SpecUtils::Measurement > *)jarg1;
  arg1 = (SpecUtils::Measurement *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::shared_ptr< SpecUtils::LocationState const > *) &((SpecUtils::Measurement const *)arg1)->location_state();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_Measurement_set_title___(void * jarg1, const char * jarg2) {
  SpecUtils::Measurement *arg1 = (SpecUtils::Measurement *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< SpecUtils::Measurement > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  SpecUtils::Measurement > *)jarg1;
  arg1 = (SpecUtils::Measurement *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->set_title((std::string const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_Measurement_set_start_time___(void * jarg1, void * jarg2) {
  SpecUtils::Measurement *arg1 = (SpecUtils::Measurement *) 0 ;
  SpecUtils::time_point_t *arg2 = 0 ;
  std::shared_ptr< SpecUtils::Measurement > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  SpecUtils::Measurement > *)jarg1;
  arg1 = (SpecUtils::Measurement *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (SpecUtils::time_point_t *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SpecUtils::time_point_t const & is null", 0);
    return ;
  } 
  (arg1)->set_start_time((SpecUtils::time_point_t const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_Measurement_set_remarks___(void * jarg1, void * jarg2) {
  SpecUtils::Measurement *arg1 = (SpecUtils::Measurement *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  std::shared_ptr< SpecUtils::Measurement > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  SpecUtils::Measurement > *)jarg1;
  arg1 = (SpecUtils::Measurement *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::vector< std::string > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & is null", 0);
    return ;
  } 
  (arg1)->set_remarks((std::vector< std::string > const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_Measurement_set_parse_warnings___(void * jarg1, void * jarg2) {
  SpecUtils::Measurement *arg1 = (SpecUtils::Measurement *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  std::shared_ptr< SpecUtils::Measurement > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  SpecUtils::Measurement > *)jarg1;
  arg1 = (SpecUtils::Measurement *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::vector< std::string > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & is null", 0);
    return ;
  } 
  (arg1)->set_parse_warnings((std::vector< std::string > const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_Measurement_set_source_type___(void * jarg1, int jarg2) {
  SpecUtils::Measurement *arg1 = (SpecUtils::Measurement *) 0 ;
  SpecUtils::SourceType arg2 ;
  std::shared_ptr< SpecUtils::Measurement > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  SpecUtils::Measurement > *)jarg1;
  arg1 = (SpecUtils::Measurement *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (SpecUtils::SourceType)jarg2; 
  (arg1)->set_source_type(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_Measurement_set_position___(void * jarg1, double jarg2, double jarg3, void * jarg4) {
  SpecUtils::Measurement *arg1 = (SpecUtils::Measurement *) 0 ;
  double arg2 ;
  double arg3 ;
  SpecUtils::time_point_t arg4 ;
  std::shared_ptr< SpecUtils::Measurement > *smartarg1 = 0 ;
  SpecUtils::time_point_t *argp4 ;
  
  
  smartarg1 = (std::shared_ptr<  SpecUtils::Measurement > *)jarg1;
  arg1 = (SpecUtils::Measurement *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  argp4 = (SpecUtils::time_point_t *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null SpecUtils::time_point_t", 0);
    return ;
  }
  arg4 = *argp4; 
  (arg1)->set_position(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_Measurement_set_sample_number___(void * jarg1, int jarg2) {
  SpecUtils::Measurement *arg1 = (SpecUtils::Measurement *) 0 ;
  int arg2 ;
  std::shared_ptr< SpecUtils::Measurement > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  SpecUtils::Measurement > *)jarg1;
  arg1 = (SpecUtils::Measurement *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  (arg1)->set_sample_number(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_Measurement_set_occupancy_status___(void * jarg1, int jarg2) {
  SpecUtils::Measurement *arg1 = (SpecUtils::Measurement *) 0 ;
  SpecUtils::OccupancyStatus arg2 ;
  std::shared_ptr< SpecUtils::Measurement > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  SpecUtils::Measurement > *)jarg1;
  arg1 = (SpecUtils::Measurement *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (SpecUtils::OccupancyStatus)jarg2; 
  (arg1)->set_occupancy_status(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_Measurement_set_detector_name___(void * jarg1, const char * jarg2) {
  SpecUtils::Measurement *arg1 = (SpecUtils::Measurement *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< SpecUtils::Measurement > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  SpecUtils::Measurement > *)jarg1;
  arg1 = (SpecUtils::Measurement *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->set_detector_name((std::string const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_Measurement_set_detector_number___(void * jarg1, int jarg2) {
  SpecUtils::Measurement *arg1 = (SpecUtils::Measurement *) 0 ;
  int arg2 ;
  std::shared_ptr< SpecUtils::Measurement > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  SpecUtils::Measurement > *)jarg1;
  arg1 = (SpecUtils::Measurement *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  (arg1)->set_detector_number(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_Measurement_set_neutron_counts__SWIG_0___(void * jarg1, void * jarg2, float jarg3) {
  SpecUtils::Measurement *arg1 = (SpecUtils::Measurement *) 0 ;
  std::vector< float > *arg2 = 0 ;
  float arg3 ;
  std::shared_ptr< SpecUtils::Measurement > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  SpecUtils::Measurement > *)jarg1;
  arg1 = (SpecUtils::Measurement *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::vector< float > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< float > const & is null", 0);
    return ;
  } 
  arg3 = (float)jarg3; 
  (arg1)->set_neutron_counts((std::vector< float > const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_Measurement_set_neutron_counts__SWIG_1___(void * jarg1, void * jarg2) {
  SpecUtils::Measurement *arg1 = (SpecUtils::Measurement *) 0 ;
  std::vector< float > *arg2 = 0 ;
  std::shared_ptr< SpecUtils::Measurement > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  SpecUtils::Measurement > *)jarg1;
  arg1 = (SpecUtils::Measurement *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::vector< float > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< float > const & is null", 0);
    return ;
  } 
  (arg1)->set_neutron_counts((std::vector< float > const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_Measurement_set_pcf_tag___(void * jarg1, char jarg2) {
  SpecUtils::Measurement *arg1 = (SpecUtils::Measurement *) 0 ;
  char arg2 ;
  std::shared_ptr< SpecUtils::Measurement > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  SpecUtils::Measurement > *)jarg1;
  arg1 = (SpecUtils::Measurement *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (char)jarg2; 
  (arg1)->set_pcf_tag(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_Measurement_set_source_description___(void * jarg1, const char * jarg2) {
  SpecUtils::Measurement *arg1 = (SpecUtils::Measurement *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< SpecUtils::Measurement > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  SpecUtils::Measurement > *)jarg1;
  arg1 = (SpecUtils::Measurement *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->set_source_description((std::string const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_Measurement_set_measurement_description___(void * jarg1, const char * jarg2) {
  SpecUtils::Measurement *arg1 = (SpecUtils::Measurement *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< SpecUtils::Measurement > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  SpecUtils::Measurement > *)jarg1;
  arg1 = (SpecUtils::Measurement *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->set_measurement_description((std::string const &)*arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_SandiafSpecUtils_Measurement_num_gamma_channels___(void * jarg1) {
  int jresult ;
  SpecUtils::Measurement *arg1 = (SpecUtils::Measurement *) 0 ;
  std::shared_ptr< SpecUtils::Measurement const > *smartarg1 = 0 ;
  size_t result;
  
  
  smartarg1 = (std::shared_ptr< const SpecUtils::Measurement > *)jarg1;
  arg1 = (SpecUtils::Measurement *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((SpecUtils::Measurement const *)arg1)->num_gamma_channels();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SandiafSpecUtils_Measurement_find_gamma_channel___(void * jarg1, float jarg2) {
  int jresult ;
  SpecUtils::Measurement *arg1 = (SpecUtils::Measurement *) 0 ;
  float arg2 ;
  std::shared_ptr< SpecUtils::Measurement const > *smartarg1 = 0 ;
  size_t result;
  
  
  smartarg1 = (std::shared_ptr< const SpecUtils::Measurement > *)jarg1;
  arg1 = (SpecUtils::Measurement *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (float)jarg2; 
  result = ((SpecUtils::Measurement const *)arg1)->find_gamma_channel(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_SandiafSpecUtils_Measurement_gamma_channel_content___(void * jarg1, int jarg2) {
  float jresult ;
  SpecUtils::Measurement *arg1 = (SpecUtils::Measurement *) 0 ;
  size_t arg2 ;
  std::shared_ptr< SpecUtils::Measurement const > *smartarg1 = 0 ;
  float result;
  
  
  smartarg1 = (std::shared_ptr< const SpecUtils::Measurement > *)jarg1;
  arg1 = (SpecUtils::Measurement *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (size_t)jarg2; 
  result = (float)((SpecUtils::Measurement const *)arg1)->gamma_channel_content(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_SandiafSpecUtils_Measurement_gamma_channel_lower___(void * jarg1, int jarg2) {
  float jresult ;
  SpecUtils::Measurement *arg1 = (SpecUtils::Measurement *) 0 ;
  size_t arg2 ;
  std::shared_ptr< SpecUtils::Measurement const > *smartarg1 = 0 ;
  float result;
  
  
  smartarg1 = (std::shared_ptr< const SpecUtils::Measurement > *)jarg1;
  arg1 = (SpecUtils::Measurement *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (size_t)jarg2; 
  result = (float)((SpecUtils::Measurement const *)arg1)->gamma_channel_lower(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_SandiafSpecUtils_Measurement_gamma_channel_center___(void * jarg1, int jarg2) {
  float jresult ;
  SpecUtils::Measurement *arg1 = (SpecUtils::Measurement *) 0 ;
  size_t arg2 ;
  std::shared_ptr< SpecUtils::Measurement const > *smartarg1 = 0 ;
  float result;
  
  
  smartarg1 = (std::shared_ptr< const SpecUtils::Measurement > *)jarg1;
  arg1 = (SpecUtils::Measurement *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (size_t)jarg2; 
  result = (float)((SpecUtils::Measurement const *)arg1)->gamma_channel_center(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_SandiafSpecUtils_Measurement_gamma_channel_upper___(void * jarg1, int jarg2) {
  float jresult ;
  SpecUtils::Measurement *arg1 = (SpecUtils::Measurement *) 0 ;
  size_t arg2 ;
  std::shared_ptr< SpecUtils::Measurement const > *smartarg1 = 0 ;
  float result;
  
  
  smartarg1 = (std::shared_ptr< const SpecUtils::Measurement > *)jarg1;
  arg1 = (SpecUtils::Measurement *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (size_t)jarg2; 
  result = (float)((SpecUtils::Measurement const *)arg1)->gamma_channel_upper(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_SandiafSpecUtils_Measurement_gamma_channel_width___(void * jarg1, int jarg2) {
  float jresult ;
  SpecUtils::Measurement *arg1 = (SpecUtils::Measurement *) 0 ;
  size_t arg2 ;
  std::shared_ptr< SpecUtils::Measurement const > *smartarg1 = 0 ;
  float result;
  
  
  smartarg1 = (std::shared_ptr< const SpecUtils::Measurement > *)jarg1;
  arg1 = (SpecUtils::Measurement *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (size_t)jarg2; 
  result = (float)((SpecUtils::Measurement const *)arg1)->gamma_channel_width(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_SandiafSpecUtils_Measurement_gamma_integral___(void * jarg1, float jarg2, float jarg3) {
  double jresult ;
  SpecUtils::Measurement *arg1 = (SpecUtils::Measurement *) 0 ;
  float arg2 ;
  float arg3 ;
  std::shared_ptr< SpecUtils::Measurement const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const SpecUtils::Measurement > *)jarg1;
  arg1 = (SpecUtils::Measurement *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (double)((SpecUtils::Measurement const *)arg1)->gamma_integral(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_SandiafSpecUtils_Measurement_gamma_channels_sum___(void * jarg1, int jarg2, int jarg3) {
  double jresult ;
  SpecUtils::Measurement *arg1 = (SpecUtils::Measurement *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  std::shared_ptr< SpecUtils::Measurement const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const SpecUtils::Measurement > *)jarg1;
  arg1 = (SpecUtils::Measurement *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  result = (double)((SpecUtils::Measurement const *)arg1)->gamma_channels_sum(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SandiafSpecUtils_Measurement_gamma_channel_energies___(void * jarg1) {
  void * jresult ;
  SpecUtils::Measurement *arg1 = (SpecUtils::Measurement *) 0 ;
  std::shared_ptr< SpecUtils::Measurement const > *smartarg1 = 0 ;
  std::shared_ptr< std::vector< float > const > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const SpecUtils::Measurement > *)jarg1;
  arg1 = (SpecUtils::Measurement *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::shared_ptr< std::vector< float > const > *) &((SpecUtils::Measurement const *)arg1)->gamma_channel_energies();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SandiafSpecUtils_Measurement_gamma_channel_contents___(void * jarg1) {
  void * jresult ;
  SpecUtils::Measurement *arg1 = (SpecUtils::Measurement *) 0 ;
  std::shared_ptr< SpecUtils::Measurement const > *smartarg1 = 0 ;
  std::shared_ptr< std::vector< float > const > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const SpecUtils::Measurement > *)jarg1;
  arg1 = (SpecUtils::Measurement *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::shared_ptr< std::vector< float > const > *) &((SpecUtils::Measurement const *)arg1)->gamma_channel_contents();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_SandiafSpecUtils_Measurement_gamma_energy_min___(void * jarg1) {
  float jresult ;
  SpecUtils::Measurement *arg1 = (SpecUtils::Measurement *) 0 ;
  std::shared_ptr< SpecUtils::Measurement const > *smartarg1 = 0 ;
  float result;
  
  
  smartarg1 = (std::shared_ptr< const SpecUtils::Measurement > *)jarg1;
  arg1 = (SpecUtils::Measurement *)(smartarg1 ? smartarg1->get() : 0); 
  result = (float)((SpecUtils::Measurement const *)arg1)->gamma_energy_min();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_SandiafSpecUtils_Measurement_gamma_energy_max___(void * jarg1) {
  float jresult ;
  SpecUtils::Measurement *arg1 = (SpecUtils::Measurement *) 0 ;
  std::shared_ptr< SpecUtils::Measurement const > *smartarg1 = 0 ;
  float result;
  
  
  smartarg1 = (std::shared_ptr< const SpecUtils::Measurement > *)jarg1;
  arg1 = (SpecUtils::Measurement *)(smartarg1 ? smartarg1->get() : 0); 
  result = (float)((SpecUtils::Measurement const *)arg1)->gamma_energy_max();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SandiafSpecUtils_Measurement_derived_data_properties___(void * jarg1) {
  void * jresult ;
  SpecUtils::Measurement *arg1 = (SpecUtils::Measurement *) 0 ;
  std::shared_ptr< SpecUtils::Measurement const > *smartarg1 = 0 ;
  uint32_t result;
  
  
  smartarg1 = (std::shared_ptr< const SpecUtils::Measurement > *)jarg1;
  arg1 = (SpecUtils::Measurement *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((SpecUtils::Measurement const *)arg1)->derived_data_properties();
  jresult = new uint32_t(result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SandiafSpecUtils_Measurement_rpm_panel_number___(void * jarg1) {
  int jresult ;
  SpecUtils::Measurement *arg1 = (SpecUtils::Measurement *) 0 ;
  std::shared_ptr< SpecUtils::Measurement const > *smartarg1 = 0 ;
  int result;
  
  
  smartarg1 = (std::shared_ptr< const SpecUtils::Measurement > *)jarg1;
  arg1 = (SpecUtils::Measurement *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)((SpecUtils::Measurement const *)arg1)->rpm_panel_number();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SandiafSpecUtils_Measurement_rpm_column_number___(void * jarg1) {
  int jresult ;
  SpecUtils::Measurement *arg1 = (SpecUtils::Measurement *) 0 ;
  std::shared_ptr< SpecUtils::Measurement const > *smartarg1 = 0 ;
  int result;
  
  
  smartarg1 = (std::shared_ptr< const SpecUtils::Measurement > *)jarg1;
  arg1 = (SpecUtils::Measurement *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)((SpecUtils::Measurement const *)arg1)->rpm_column_number();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SandiafSpecUtils_Measurement_rpm_mca_number___(void * jarg1) {
  int jresult ;
  SpecUtils::Measurement *arg1 = (SpecUtils::Measurement *) 0 ;
  std::shared_ptr< SpecUtils::Measurement const > *smartarg1 = 0 ;
  int result;
  
  
  smartarg1 = (std::shared_ptr< const SpecUtils::Measurement > *)jarg1;
  arg1 = (SpecUtils::Measurement *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)((SpecUtils::Measurement const *)arg1)->rpm_mca_number();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SandiafSpecUtils_Measurement_write_2006_N42_xml___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  SpecUtils::Measurement *arg1 = (SpecUtils::Measurement *) 0 ;
  std::ostream *arg2 = 0 ;
  std::shared_ptr< SpecUtils::Measurement const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const SpecUtils::Measurement > *)jarg1;
  arg1 = (SpecUtils::Measurement *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::ostream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::ostream & is null", 0);
    return 0;
  } 
  result = (bool)((SpecUtils::Measurement const *)arg1)->write_2006_N42_xml(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SandiafSpecUtils_Measurement_write_csv___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  SpecUtils::Measurement *arg1 = (SpecUtils::Measurement *) 0 ;
  std::ostream *arg2 = 0 ;
  std::shared_ptr< SpecUtils::Measurement const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const SpecUtils::Measurement > *)jarg1;
  arg1 = (SpecUtils::Measurement *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::ostream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::ostream & is null", 0);
    return 0;
  } 
  result = (bool)((SpecUtils::Measurement const *)arg1)->write_csv(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SandiafSpecUtils_Measurement_write_txt___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  SpecUtils::Measurement *arg1 = (SpecUtils::Measurement *) 0 ;
  std::ostream *arg2 = 0 ;
  std::shared_ptr< SpecUtils::Measurement const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const SpecUtils::Measurement > *)jarg1;
  arg1 = (SpecUtils::Measurement *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::ostream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::ostream & is null", 0);
    return 0;
  } 
  result = (bool)((SpecUtils::Measurement const *)arg1)->write_txt(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_Measurement_reset___(void * jarg1) {
  SpecUtils::Measurement *arg1 = (SpecUtils::Measurement *) 0 ;
  std::shared_ptr< SpecUtils::Measurement > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  SpecUtils::Measurement > *)jarg1;
  arg1 = (SpecUtils::Measurement *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->reset();
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_Measurement_rebin___(void * jarg1, void * jarg2) {
  SpecUtils::Measurement *arg1 = (SpecUtils::Measurement *) 0 ;
  std::shared_ptr< SpecUtils::EnergyCalibration const > *arg2 = 0 ;
  std::shared_ptr< SpecUtils::Measurement > *smartarg1 = 0 ;
  std::shared_ptr< SpecUtils::EnergyCalibration const > tempnull2 ;
  
  
  smartarg1 = (std::shared_ptr<  SpecUtils::Measurement > *)jarg1;
  arg1 = (SpecUtils::Measurement *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? (std::shared_ptr< SpecUtils::EnergyCalibration const > *)jarg2 : &tempnull2; 
  (arg1)->rebin((std::shared_ptr< SpecUtils::EnergyCalibration const > const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_Measurement_set_energy_calibration___(void * jarg1, void * jarg2) {
  SpecUtils::Measurement *arg1 = (SpecUtils::Measurement *) 0 ;
  std::shared_ptr< SpecUtils::EnergyCalibration const > *arg2 = 0 ;
  std::shared_ptr< SpecUtils::Measurement > *smartarg1 = 0 ;
  std::shared_ptr< SpecUtils::EnergyCalibration const > tempnull2 ;
  
  
  smartarg1 = (std::shared_ptr<  SpecUtils::Measurement > *)jarg1;
  arg1 = (SpecUtils::Measurement *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? (std::shared_ptr< SpecUtils::EnergyCalibration const > *)jarg2 : &tempnull2; 
  (arg1)->set_energy_calibration((std::shared_ptr< SpecUtils::EnergyCalibration const > const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_Measurement_set_ecal___(void * jarg1, void * jarg2) {
  SpecUtils::Measurement *arg1 = (SpecUtils::Measurement *) 0 ;
  std::shared_ptr< SpecUtils::EnergyCalibration const > *arg2 = 0 ;
  std::shared_ptr< SpecUtils::Measurement > *smartarg1 = 0 ;
  std::shared_ptr< SpecUtils::EnergyCalibration const > tempnull2 ;
  
  
  smartarg1 = (std::shared_ptr<  SpecUtils::Measurement > *)jarg1;
  arg1 = (SpecUtils::Measurement *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? (std::shared_ptr< SpecUtils::EnergyCalibration const > *)jarg2 : &tempnull2; 
  (arg1)->set_ecal((std::shared_ptr< SpecUtils::EnergyCalibration const > const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_Measurement_set_info_from_2006_N42_spectrum_node___(void * jarg1, void * jarg2) {
  SpecUtils::Measurement *arg1 = (SpecUtils::Measurement *) 0 ;
  rapidxml::xml_node< char > *arg2 = (rapidxml::xml_node< char > *) (rapidxml::xml_node< char > *)0 ;
  std::shared_ptr< SpecUtils::Measurement > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  SpecUtils::Measurement > *)jarg1;
  arg1 = (SpecUtils::Measurement *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (rapidxml::xml_node< char > *)jarg2; 
  (arg1)->set_info_from_2006_N42_spectrum_node((rapidxml::xml_node< char > const *)arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_SandiafSpecUtils_Measurement_gamma_count_at___(void * jarg1, int jarg2) {
  float jresult ;
  SpecUtils::Measurement *arg1 = (SpecUtils::Measurement *) 0 ;
  int arg2 ;
  std::shared_ptr< SpecUtils::Measurement > *smartarg1 = 0 ;
  float result;
  
  
  smartarg1 = (std::shared_ptr<  SpecUtils::Measurement > *)jarg1;
  arg1 = (SpecUtils::Measurement *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  result = (float)SpecUtils_Measurement_gamma_count_at(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SandiafSpecUtils_Measurement_get_num_channels___(void * jarg1) {
  int jresult ;
  SpecUtils::Measurement *arg1 = (SpecUtils::Measurement *) 0 ;
  std::shared_ptr< SpecUtils::Measurement > *smartarg1 = 0 ;
  size_t result;
  
  
  smartarg1 = (std::shared_ptr<  SpecUtils::Measurement > *)jarg1;
  arg1 = (SpecUtils::Measurement *)(smartarg1 ? smartarg1->get() : 0); 
  result = SpecUtils_Measurement_get_num_channels(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_SandiafSpecUtils_Measurement_get_start_time_string___(void * jarg1) {
  const char * jresult ;
  SpecUtils::Measurement *arg1 = (SpecUtils::Measurement *) 0 ;
  std::shared_ptr< SpecUtils::Measurement > *smartarg1 = 0 ;
  std::string result;
  
  
  smartarg1 = (std::shared_ptr<  SpecUtils::Measurement > *)jarg1;
  arg1 = (SpecUtils::Measurement *)(smartarg1 ? smartarg1->get() : 0); 
  result = SpecUtils_Measurement_get_start_time_string(arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_Measurement_set_start_time_from_string___(void * jarg1, const char * jarg2) {
  SpecUtils::Measurement *arg1 = (SpecUtils::Measurement *) 0 ;
  std::string arg2 ;
  std::shared_ptr< SpecUtils::Measurement > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  SpecUtils::Measurement > *)jarg1;
  arg1 = (SpecUtils::Measurement *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg2)->assign(jarg2); 
  SpecUtils_Measurement_set_start_time_from_string(arg1,SWIG_STD_MOVE(arg2));
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_Measurement_set_neutron_count___(void * jarg1, float jarg2) {
  SpecUtils::Measurement *arg1 = (SpecUtils::Measurement *) 0 ;
  float arg2 ;
  std::shared_ptr< SpecUtils::Measurement > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  SpecUtils::Measurement > *)jarg1;
  arg1 = (SpecUtils::Measurement *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (float)jarg2; 
  SpecUtils_Measurement_set_neutron_count(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_SandiafSpecUtils_Measurement_get_neutron_count___(void * jarg1) {
  float jresult ;
  SpecUtils::Measurement *arg1 = (SpecUtils::Measurement *) 0 ;
  std::shared_ptr< SpecUtils::Measurement > *smartarg1 = 0 ;
  float result;
  
  
  smartarg1 = (std::shared_ptr<  SpecUtils::Measurement > *)jarg1;
  arg1 = (SpecUtils::Measurement *)(smartarg1 ? smartarg1->get() : 0); 
  result = (float)SpecUtils_Measurement_get_neutron_count(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SandiafSpecUtils_new_SpecFile__SWIG_0___() {
  void * jresult ;
  SpecUtils::SpecFile *result = 0 ;
  
  result = (SpecUtils::SpecFile *)new SpecUtils::SpecFile();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SandiafSpecUtils_new_SpecFile__SWIG_1___(void * jarg1) {
  void * jresult ;
  SpecUtils::SpecFile *arg1 = 0 ;
  SpecUtils::SpecFile *result = 0 ;
  
  arg1 = (SpecUtils::SpecFile *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SpecUtils::SpecFile const & is null", 0);
    return 0;
  } 
  result = (SpecUtils::SpecFile *)new SpecUtils::SpecFile((SpecUtils::SpecFile const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_delete_SpecFile___(void * jarg1) {
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_load_file__SWIG_0___(void * jarg1, const char * jarg2, int jarg3, const char * jarg4) {
  unsigned int jresult ;
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  std::string *arg2 = 0 ;
  SpecUtils::ParserType arg3 ;
  std::string arg4 ;
  bool result;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (SpecUtils::ParserType)jarg3; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg4)->assign(jarg4); 
  result = (bool)(arg1)->load_file((std::string const &)*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_load_file__SWIG_1___(void * jarg1, const char * jarg2, int jarg3) {
  unsigned int jresult ;
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  std::string *arg2 = 0 ;
  SpecUtils::ParserType arg3 ;
  bool result;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (SpecUtils::ParserType)jarg3; 
  result = (bool)(arg1)->load_file((std::string const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_parse_warnings___(void * jarg1) {
  void * jresult ;
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  std::vector< std::string > *result = 0 ;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  result = (std::vector< std::string > *) &((SpecUtils::SpecFile const *)arg1)->parse_warnings();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_modified___(void * jarg1) {
  unsigned int jresult ;
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  bool result;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  result = (bool)((SpecUtils::SpecFile const *)arg1)->modified();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_reset_modified___(void * jarg1) {
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  (arg1)->reset_modified();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_modified_since_decode___(void * jarg1) {
  unsigned int jresult ;
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  bool result;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  result = (bool)((SpecUtils::SpecFile const *)arg1)->modified_since_decode();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_reset_modified_since_decode___(void * jarg1) {
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  (arg1)->reset_modified_since_decode();
}


SWIGEXPORT float SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_gamma_live_time___(void * jarg1) {
  float jresult ;
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  float result;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  result = (float)((SpecUtils::SpecFile const *)arg1)->gamma_live_time();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_gamma_real_time___(void * jarg1) {
  float jresult ;
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  float result;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  result = (float)((SpecUtils::SpecFile const *)arg1)->gamma_real_time();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_gamma_count_sum___(void * jarg1) {
  double jresult ;
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  double result;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  result = (double)((SpecUtils::SpecFile const *)arg1)->gamma_count_sum();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_neutron_counts_sum___(void * jarg1) {
  double jresult ;
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  double result;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  result = (double)((SpecUtils::SpecFile const *)arg1)->neutron_counts_sum();
  jresult = result; 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_filename___(void * jarg1) {
  const char * jresult ;
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  result = (std::string *) &((SpecUtils::SpecFile const *)arg1)->filename();
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_detector_names___(void * jarg1) {
  void * jresult ;
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  std::vector< std::string > *result = 0 ;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  result = (std::vector< std::string > *) &((SpecUtils::SpecFile const *)arg1)->detector_names();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_detector_numbers___(void * jarg1) {
  void * jresult ;
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  std::vector< int > *result = 0 ;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  result = (std::vector< int > *) &((SpecUtils::SpecFile const *)arg1)->detector_numbers();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_gamma_detector_names___(void * jarg1) {
  void * jresult ;
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  std::vector< std::string > *result = 0 ;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  result = (std::vector< std::string > *) &((SpecUtils::SpecFile const *)arg1)->gamma_detector_names();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_neutron_detector_names___(void * jarg1) {
  void * jresult ;
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  std::vector< std::string > *result = 0 ;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  result = (std::vector< std::string > *) &((SpecUtils::SpecFile const *)arg1)->neutron_detector_names();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_uuid___(void * jarg1) {
  const char * jresult ;
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  result = (std::string *) &((SpecUtils::SpecFile const *)arg1)->uuid();
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_remarks___(void * jarg1) {
  void * jresult ;
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  std::vector< std::string > *result = 0 ;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  result = (std::vector< std::string > *) &((SpecUtils::SpecFile const *)arg1)->remarks();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_lane_number___(void * jarg1) {
  int jresult ;
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  int result;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  result = (int)((SpecUtils::SpecFile const *)arg1)->lane_number();
  jresult = result; 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_measurement_location_name___(void * jarg1) {
  const char * jresult ;
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  result = (std::string *) &((SpecUtils::SpecFile const *)arg1)->measurement_location_name();
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_inspection___(void * jarg1) {
  const char * jresult ;
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  result = (std::string *) &((SpecUtils::SpecFile const *)arg1)->inspection();
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_measurement_operator___(void * jarg1) {
  const char * jresult ;
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  result = (std::string *) &((SpecUtils::SpecFile const *)arg1)->measurement_operator();
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_sample_numbers___(void * jarg1) {
  void * jresult ;
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  std::set< int > *result = 0 ;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  result = (std::set< int > *) &((SpecUtils::SpecFile const *)arg1)->sample_numbers();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_num_measurements___(void * jarg1) {
  int jresult ;
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  size_t result;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  result = ((SpecUtils::SpecFile const *)arg1)->num_measurements();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_detector_type___(void * jarg1) {
  int jresult ;
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  SpecUtils::DetectorType result;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  result = (SpecUtils::DetectorType)((SpecUtils::SpecFile const *)arg1)->detector_type();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_instrument_type___(void * jarg1) {
  const char * jresult ;
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  result = (std::string *) &((SpecUtils::SpecFile const *)arg1)->instrument_type();
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_manufacturer___(void * jarg1) {
  const char * jresult ;
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  result = (std::string *) &((SpecUtils::SpecFile const *)arg1)->manufacturer();
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_instrument_model___(void * jarg1) {
  const char * jresult ;
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  result = (std::string *) &((SpecUtils::SpecFile const *)arg1)->instrument_model();
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_instrument_id___(void * jarg1) {
  const char * jresult ;
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  result = (std::string *) &((SpecUtils::SpecFile const *)arg1)->instrument_id();
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_measurements___(void * jarg1) {
  void * jresult ;
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  SwigValueWrapper< std::vector< std::shared_ptr< SpecUtils::Measurement const > > > result;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  result = ((SpecUtils::SpecFile const *)arg1)->measurements();
  jresult = new std::vector< std::shared_ptr< SpecUtils::Measurement const > >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_measurement__SWIG_0___(void * jarg1, int jarg2) {
  void * jresult ;
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  size_t arg2 ;
  std::shared_ptr< SpecUtils::Measurement const > result;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  arg2 = (size_t)jarg2; 
  result = ((SpecUtils::SpecFile const *)arg1)->measurement(arg2);
  jresult = result ? new std::shared_ptr< SpecUtils::Measurement const >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_detectors_analysis___(void * jarg1) {
  void * jresult ;
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  SwigValueWrapper< std::shared_ptr< SpecUtils::DetectorAnalysis const > > result;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  result = ((SpecUtils::SpecFile const *)arg1)->detectors_analysis();
  jresult = new std::shared_ptr< SpecUtils::DetectorAnalysis const >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_multimedia_data___(void * jarg1) {
  void * jresult ;
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  std::vector< std::shared_ptr< SpecUtils::MultimediaData const > > *result = 0 ;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  result = (std::vector< std::shared_ptr< SpecUtils::MultimediaData const > > *) &((SpecUtils::SpecFile const *)arg1)->multimedia_data();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_has_gps_info___(void * jarg1) {
  unsigned int jresult ;
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  bool result;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  result = (bool)((SpecUtils::SpecFile const *)arg1)->has_gps_info();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_mean_latitude___(void * jarg1) {
  double jresult ;
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  double result;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  result = (double)((SpecUtils::SpecFile const *)arg1)->mean_latitude();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_mean_longitude___(void * jarg1) {
  double jresult ;
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  double result;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  result = (double)((SpecUtils::SpecFile const *)arg1)->mean_longitude();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_passthrough___(void * jarg1) {
  unsigned int jresult ;
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  bool result;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  result = (bool)((SpecUtils::SpecFile const *)arg1)->passthrough();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_contains_derived_data___(void * jarg1) {
  unsigned int jresult ;
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  bool result;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  result = (bool)((SpecUtils::SpecFile const *)arg1)->contains_derived_data();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_contains_non_derived_data___(void * jarg1) {
  unsigned int jresult ;
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  bool result;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  result = (bool)((SpecUtils::SpecFile const *)arg1)->contains_non_derived_data();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_set_filename___(void * jarg1, const char * jarg2) {
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->set_filename((std::string const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_set_remarks__SWIG_0___(void * jarg1, void * jarg2) {
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  arg2 = (std::vector< std::string > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & is null", 0);
    return ;
  } 
  (arg1)->set_remarks((std::vector< std::string > const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_add_remark___(void * jarg1, const char * jarg2) {
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->add_remark((std::string const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_set_parse_warnings___(void * jarg1, void * jarg2) {
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  arg2 = (std::vector< std::string > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & is null", 0);
    return ;
  } 
  (arg1)->set_parse_warnings((std::vector< std::string > const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_set_uuid___(void * jarg1, const char * jarg2) {
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->set_uuid((std::string const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_set_lane_number___(void * jarg1, int jarg2) {
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  int arg2 ;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->set_lane_number(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_set_measurement_location_name___(void * jarg1, const char * jarg2) {
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->set_measurement_location_name((std::string const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_set_inspection___(void * jarg1, const char * jarg2) {
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->set_inspection((std::string const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_set_instrument_type___(void * jarg1, const char * jarg2) {
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->set_instrument_type((std::string const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_set_detector_type___(void * jarg1, int jarg2) {
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  SpecUtils::DetectorType arg2 ;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  arg2 = (SpecUtils::DetectorType)jarg2; 
  (arg1)->set_detector_type(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_set_manufacturer___(void * jarg1, const char * jarg2) {
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->set_manufacturer((std::string const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_set_instrument_model___(void * jarg1, const char * jarg2) {
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->set_instrument_model((std::string const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_set_instrument_id___(void * jarg1, const char * jarg2) {
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->set_instrument_id((std::string const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_set_live_time___(void * jarg1, float jarg2, void * jarg3) {
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  float arg2 ;
  std::shared_ptr< SpecUtils::Measurement const > arg3 ;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  arg2 = (float)jarg2; 
  if (jarg3) arg3 = *(std::shared_ptr< SpecUtils::Measurement const > *)jarg3; 
  (arg1)->set_live_time(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_set_real_time___(void * jarg1, float jarg2, void * jarg3) {
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  float arg2 ;
  std::shared_ptr< SpecUtils::Measurement const > arg3 ;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  arg2 = (float)jarg2; 
  if (jarg3) arg3 = *(std::shared_ptr< SpecUtils::Measurement const > *)jarg3; 
  (arg1)->set_real_time(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_set_start_time___(void * jarg1, void * jarg2, void * jarg3) {
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  SpecUtils::time_point_t *arg2 = 0 ;
  std::shared_ptr< SpecUtils::Measurement const > arg3 ;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  arg2 = (SpecUtils::time_point_t *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SpecUtils::time_point_t const & is null", 0);
    return ;
  } 
  if (jarg3) arg3 = *(std::shared_ptr< SpecUtils::Measurement const > *)jarg3; 
  (arg1)->set_start_time((SpecUtils::time_point_t const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_set_remarks__SWIG_1___(void * jarg1, void * jarg2, void * jarg3) {
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  std::shared_ptr< SpecUtils::Measurement const > arg3 ;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  arg2 = (std::vector< std::string > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & is null", 0);
    return ;
  } 
  if (jarg3) arg3 = *(std::shared_ptr< SpecUtils::Measurement const > *)jarg3; 
  (arg1)->set_remarks((std::vector< std::string > const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_set_source_type___(void * jarg1, int jarg2, void * jarg3) {
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  SpecUtils::SourceType arg2 ;
  std::shared_ptr< SpecUtils::Measurement const > arg3 ;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  arg2 = (SpecUtils::SourceType)jarg2; 
  if (jarg3) arg3 = *(std::shared_ptr< SpecUtils::Measurement const > *)jarg3; 
  (arg1)->set_source_type(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_set_position___(void * jarg1, double jarg2, double jarg3, void * jarg4, void * jarg5) {
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  double arg2 ;
  double arg3 ;
  SpecUtils::time_point_t arg4 ;
  std::shared_ptr< SpecUtils::Measurement const > arg5 ;
  SpecUtils::time_point_t *argp4 ;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  argp4 = (SpecUtils::time_point_t *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null SpecUtils::time_point_t", 0);
    return ;
  }
  arg4 = *argp4; 
  if (jarg5) arg5 = *(std::shared_ptr< SpecUtils::Measurement const > *)jarg5; 
  (arg1)->set_position(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_set_title___(void * jarg1, const char * jarg2, void * jarg3) {
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< SpecUtils::Measurement const > arg3 ;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (jarg3) arg3 = *(std::shared_ptr< SpecUtils::Measurement const > *)jarg3; 
  (arg1)->set_title((std::string const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_set_contained_neutrons___(void * jarg1, unsigned int jarg2, float jarg3, void * jarg4, float jarg5) {
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  bool arg2 ;
  float arg3 ;
  std::shared_ptr< SpecUtils::Measurement const > arg4 ;
  float arg5 ;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (float)jarg3; 
  if (jarg4) arg4 = *(std::shared_ptr< SpecUtils::Measurement const > *)jarg4; 
  arg5 = (float)jarg5; 
  (arg1)->set_contained_neutrons(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_set_detectors_analysis___(void * jarg1, void * jarg2) {
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  SpecUtils::DetectorAnalysis *arg2 = 0 ;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  arg2 = (SpecUtils::DetectorAnalysis *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SpecUtils::DetectorAnalysis const & is null", 0);
    return ;
  } 
  (arg1)->set_detectors_analysis((SpecUtils::DetectorAnalysis const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_change_detector_name___(void * jarg1, const char * jarg2, const char * jarg3) {
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  (arg1)->change_detector_name((std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_change_sample_numbers___(void * jarg1, void * jarg2) {
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  std::vector< std::pair< int,int > > *arg2 = 0 ;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  arg2 = (std::vector< std::pair< int,int > > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::pair< int,int > > const & is null", 0);
    return ;
  } 
  (arg1)->change_sample_numbers((std::vector< std::pair< int,int > > const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_add_measurement__SWIG_0___(void * jarg1, void * jarg2, unsigned int jarg3) {
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  std::shared_ptr< SpecUtils::Measurement > arg2 ;
  bool arg3 ;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  if (jarg2) arg2 = *(std::shared_ptr< SpecUtils::Measurement > *)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->add_measurement(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_add_measurement__SWIG_1___(void * jarg1, void * jarg2) {
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  std::shared_ptr< SpecUtils::Measurement > arg2 ;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  if (jarg2) arg2 = *(std::shared_ptr< SpecUtils::Measurement > *)jarg2; 
  (arg1)->add_measurement(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_remove_measurement___(void * jarg1, void * jarg2, unsigned int jarg3) {
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  std::shared_ptr< SpecUtils::Measurement const > arg2 ;
  bool arg3 ;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  if (jarg2) arg2 = *(std::shared_ptr< SpecUtils::Measurement const > *)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->remove_measurement(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_remove_measurements___(void * jarg1, void * jarg2) {
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  std::vector< std::shared_ptr< SpecUtils::Measurement const > > *arg2 = 0 ;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  arg2 = (std::vector< std::shared_ptr< SpecUtils::Measurement const > > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::shared_ptr< SpecUtils::Measurement const > > const & is null", 0);
    return ;
  } 
  (arg1)->remove_measurements((std::vector< std::shared_ptr< SpecUtils::Measurement const > > const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_clear_multimedia_data___(void * jarg1) {
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  (arg1)->clear_multimedia_data();
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_add_multimedia_data___(void * jarg1, void * jarg2) {
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  SpecUtils::MultimediaData *arg2 = 0 ;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  arg2 = (SpecUtils::MultimediaData *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SpecUtils::MultimediaData const & is null", 0);
    return ;
  } 
  (arg1)->add_multimedia_data((SpecUtils::MultimediaData const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_set_multimedia_data___(void * jarg1, void * jarg2) {
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  std::vector< std::shared_ptr< SpecUtils::MultimediaData const > > *arg2 = 0 ;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  arg2 = (std::vector< std::shared_ptr< SpecUtils::MultimediaData const > > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::shared_ptr< SpecUtils::MultimediaData const > > & is null", 0);
    return ;
  } 
  (arg1)->set_multimedia_data(*arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_occupancy_number_from_remarks___(void * jarg1) {
  int jresult ;
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  int result;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  result = (int)((SpecUtils::SpecFile const *)arg1)->occupancy_number_from_remarks();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_sample_measurements___(void * jarg1, int jarg2) {
  void * jresult ;
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  int arg2 ;
  SwigValueWrapper< std::vector< std::shared_ptr< SpecUtils::Measurement const > > > result;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  arg2 = (int)jarg2; 
  result = ((SpecUtils::SpecFile const *)arg1)->sample_measurements(arg2);
  jresult = new std::vector< std::shared_ptr< SpecUtils::Measurement const > >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_measurement__SWIG_1___(void * jarg1, int jarg2, const char * jarg3) {
  void * jresult ;
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  std::shared_ptr< SpecUtils::Measurement const > result;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  arg2 = (int)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  result = ((SpecUtils::SpecFile const *)arg1)->measurement(arg2,(std::string const &)*arg3);
  jresult = result ? new std::shared_ptr< SpecUtils::Measurement const >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_measurement__SWIG_2___(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  int arg2 ;
  int arg3 ;
  std::shared_ptr< SpecUtils::Measurement const > result;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = ((SpecUtils::SpecFile const *)arg1)->measurement(arg2,arg3);
  jresult = result ? new std::shared_ptr< SpecUtils::Measurement const >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_suggested_sum_energy_calibration___(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  std::set< int > *arg2 = 0 ;
  std::vector< std::string > *arg3 = 0 ;
  std::shared_ptr< SpecUtils::EnergyCalibration const > result;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  arg2 = (std::set< int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< int > const & is null", 0);
    return 0;
  } 
  arg3 = (std::vector< std::string > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & is null", 0);
    return 0;
  } 
  result = ((SpecUtils::SpecFile const *)arg1)->suggested_sum_energy_calibration((std::set< int > const &)*arg2,(std::vector< std::string > const &)*arg3);
  jresult = result ? new std::shared_ptr< SpecUtils::EnergyCalibration const >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_sum_measurements___(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  std::set< int > *arg2 = 0 ;
  std::vector< std::string > *arg3 = 0 ;
  std::shared_ptr< SpecUtils::EnergyCalibration const > arg4 ;
  std::shared_ptr< SpecUtils::Measurement > result;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  arg2 = (std::set< int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< int > const & is null", 0);
    return 0;
  } 
  arg3 = (std::vector< std::string > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & is null", 0);
    return 0;
  } 
  if (jarg4) arg4 = *(std::shared_ptr< SpecUtils::EnergyCalibration const > *)jarg4; 
  result = ((SpecUtils::SpecFile const *)arg1)->sum_measurements((std::set< int > const &)*arg2,(std::vector< std::string > const &)*arg3,arg4);
  jresult = result ? new std::shared_ptr< SpecUtils::Measurement >(result) : 0; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_memmorysize___(void * jarg1) {
  int jresult ;
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  size_t result;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  result = ((SpecUtils::SpecFile const *)arg1)->memmorysize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_gamma_channel_counts___(void * jarg1) {
  void * jresult ;
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  std::set< size_t > result;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  result = ((SpecUtils::SpecFile const *)arg1)->gamma_channel_counts();
  jresult = new std::set< size_t >(result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_num_gamma_channels___(void * jarg1) {
  int jresult ;
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  size_t result;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  result = ((SpecUtils::SpecFile const *)arg1)->num_gamma_channels();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_keep_n_bin_spectra_only___(void * jarg1, int jarg2) {
  int jresult ;
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  size_t arg2 ;
  size_t result;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (arg1)->keep_n_bin_spectra_only(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_contained_neutron___(void * jarg1) {
  unsigned int jresult ;
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  bool result;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  result = (bool)((SpecUtils::SpecFile const *)arg1)->contained_neutron();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_energy_cal_variants___(void * jarg1) {
  void * jresult ;
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  SwigValueWrapper< std::set< std::string > > result;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  result = ((SpecUtils::SpecFile const *)arg1)->energy_cal_variants();
  jresult = new std::set< std::string >(result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_keep_energy_cal_variants___(void * jarg1, void * jarg2) {
  int jresult ;
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  std::set< std::string > *arg2 = 0 ;
  size_t result;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  arg2 = (std::set< std::string > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< std::string > const & is null", 0);
    return 0;
  } 
  result = (arg1)->keep_energy_cal_variants((std::set< std::string > const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_keep_derived_data_variant___(void * jarg1, int jarg2) {
  int jresult ;
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  SpecUtils::SpecFile::DerivedVariantToKeep arg2 ;
  size_t result;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  arg2 = (SpecUtils::SpecFile::DerivedVariantToKeep)jarg2; 
  result = (arg1)->keep_derived_data_variant(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_remove_detectors_data___(void * jarg1, void * jarg2) {
  int jresult ;
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  std::set< std::string > *arg2 = 0 ;
  size_t result;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  arg2 = (std::set< std::string > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< std::string > const & is null", 0);
    return 0;
  } 
  result = (arg1)->remove_detectors_data((std::set< std::string > const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_remove_neutron_measurements___(void * jarg1) {
  int jresult ;
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  size_t result;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  result = (arg1)->remove_neutron_measurements();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_background_sample_number___(void * jarg1) {
  int jresult ;
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  int result;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  result = (int)((SpecUtils::SpecFile const *)arg1)->background_sample_number();
  jresult = result; 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_generate_psuedo_uuid___(void * jarg1) {
  const char * jresult ;
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  std::string result;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  result = ((SpecUtils::SpecFile const *)arg1)->generate_psuedo_uuid();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_reset___(void * jarg1) {
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  (arg1)->reset();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_load_N42_file___(void * jarg1, const char * jarg2) {
  unsigned int jresult ;
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)(arg1)->load_N42_file((std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_load_pcf_file___(void * jarg1, const char * jarg2) {
  unsigned int jresult ;
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)(arg1)->load_pcf_file((std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_load_spc_file___(void * jarg1, const char * jarg2) {
  unsigned int jresult ;
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)(arg1)->load_spc_file((std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_load_chn_file___(void * jarg1, const char * jarg2) {
  unsigned int jresult ;
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)(arg1)->load_chn_file((std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_load_iaea_file___(void * jarg1, const char * jarg2) {
  unsigned int jresult ;
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)(arg1)->load_iaea_file((std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_load_binary_exploranium_file___(void * jarg1, const char * jarg2) {
  unsigned int jresult ;
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)(arg1)->load_binary_exploranium_file((std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_load_micro_raider_file___(void * jarg1, const char * jarg2) {
  unsigned int jresult ;
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)(arg1)->load_micro_raider_file((std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_load_txt_or_csv_file___(void * jarg1, const char * jarg2) {
  unsigned int jresult ;
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)(arg1)->load_txt_or_csv_file((std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_load_cnf_file___(void * jarg1, const char * jarg2) {
  unsigned int jresult ;
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)(arg1)->load_cnf_file((std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_load_tracs_mps_file___(void * jarg1, const char * jarg2) {
  unsigned int jresult ;
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)(arg1)->load_tracs_mps_file((std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_load_aram_file___(void * jarg1, const char * jarg2) {
  unsigned int jresult ;
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)(arg1)->load_aram_file((std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_load_spectroscopic_daily_file___(void * jarg1, const char * jarg2) {
  unsigned int jresult ;
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)(arg1)->load_spectroscopic_daily_file((std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_load_amptek_file___(void * jarg1, const char * jarg2) {
  unsigned int jresult ;
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)(arg1)->load_amptek_file((std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_load_ortec_listmode_file___(void * jarg1, const char * jarg2) {
  unsigned int jresult ;
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)(arg1)->load_ortec_listmode_file((std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_load_lsrm_spe_file___(void * jarg1, const char * jarg2) {
  unsigned int jresult ;
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)(arg1)->load_lsrm_spe_file((std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_load_tka_file___(void * jarg1, const char * jarg2) {
  unsigned int jresult ;
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)(arg1)->load_tka_file((std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_load_multiact_file___(void * jarg1, const char * jarg2) {
  unsigned int jresult ;
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)(arg1)->load_multiact_file((std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_load_phd_file___(void * jarg1, const char * jarg2) {
  unsigned int jresult ;
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)(arg1)->load_phd_file((std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_load_lzs_file___(void * jarg1, const char * jarg2) {
  unsigned int jresult ;
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)(arg1)->load_lzs_file((std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_load_radiacode_file___(void * jarg1, const char * jarg2) {
  unsigned int jresult ;
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)(arg1)->load_radiacode_file((std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_load_xml_scan_data_file___(void * jarg1, const char * jarg2) {
  unsigned int jresult ;
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)(arg1)->load_xml_scan_data_file((std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_load_json_file___(void * jarg1, const char * jarg2) {
  unsigned int jresult ;
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)(arg1)->load_json_file((std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_load_caen_gxml_file___(void * jarg1, const char * jarg2) {
  unsigned int jresult ;
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)(arg1)->load_caen_gxml_file((std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_load_from_N42___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  std::istream *arg2 = 0 ;
  bool result;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  arg2 = (std::istream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::istream & is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->load_from_N42(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_load_N42_from_data__SWIG_0___(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->load_N42_from_data(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_load_N42_from_data__SWIG_1___(void * jarg1, char * jarg2, char * jarg3) {
  unsigned int jresult ;
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  result = (bool)(arg1)->load_N42_from_data(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_load_from_iaea_spc___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  std::istream *arg2 = 0 ;
  bool result;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  arg2 = (std::istream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::istream & is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->load_from_iaea_spc(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_load_from_binary_spc___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  std::istream *arg2 = 0 ;
  bool result;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  arg2 = (std::istream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::istream & is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->load_from_binary_spc(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_load_from_N42_document___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  rapidxml::xml_node< char > *arg2 = (rapidxml::xml_node< char > *) 0 ;
  bool result;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  arg2 = (rapidxml::xml_node< char > *)jarg2; 
  result = (bool)(arg1)->load_from_N42_document((rapidxml::xml_node< char > const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_load_from_micro_raider_from_data___(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->load_from_micro_raider_from_data((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_load_from_binary_exploranium___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  std::istream *arg2 = 0 ;
  bool result;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  arg2 = (std::istream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::istream & is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->load_from_binary_exploranium(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_load_from_pcf___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  std::istream *arg2 = 0 ;
  bool result;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  arg2 = (std::istream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::istream & is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->load_from_pcf(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_load_from_txt_or_csv___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  std::istream *arg2 = 0 ;
  bool result;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  arg2 = (std::istream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::istream & is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->load_from_txt_or_csv(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_load_from_Gr135_txt___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  std::istream *arg2 = 0 ;
  bool result;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  arg2 = (std::istream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::istream & is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->load_from_Gr135_txt(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_load_from_spectroscopic_daily_file___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  std::istream *arg2 = 0 ;
  bool result;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  arg2 = (std::istream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::istream & is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->load_from_spectroscopic_daily_file(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_load_from_srpm210_csv___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  std::istream *arg2 = 0 ;
  bool result;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  arg2 = (std::istream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::istream & is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->load_from_srpm210_csv(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_load_from_D3S_raw___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  std::istream *arg2 = 0 ;
  bool result;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  arg2 = (std::istream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::istream & is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->load_from_D3S_raw(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_load_from_amptek_mca___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  std::istream *arg2 = 0 ;
  bool result;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  arg2 = (std::istream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::istream & is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->load_from_amptek_mca(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_load_from_ortec_listmode___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  std::istream *arg2 = 0 ;
  bool result;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  arg2 = (std::istream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::istream & is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->load_from_ortec_listmode(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_load_from_lsrm_spe___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  std::istream *arg2 = 0 ;
  bool result;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  arg2 = (std::istream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::istream & is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->load_from_lsrm_spe(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_load_from_tka___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  std::istream *arg2 = 0 ;
  bool result;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  arg2 = (std::istream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::istream & is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->load_from_tka(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_load_from_multiact___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  std::istream *arg2 = 0 ;
  bool result;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  arg2 = (std::istream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::istream & is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->load_from_multiact(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_load_from_phd___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  std::istream *arg2 = 0 ;
  bool result;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  arg2 = (std::istream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::istream & is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->load_from_phd(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_load_from_lzs___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  std::istream *arg2 = 0 ;
  bool result;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  arg2 = (std::istream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::istream & is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->load_from_lzs(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_load_from_radiacode___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  std::istream *arg2 = 0 ;
  bool result;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  arg2 = (std::istream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::istream & is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->load_from_radiacode(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_load_from_radiacode_spectrogram___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  std::istream *arg2 = 0 ;
  bool result;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  arg2 = (std::istream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::istream & is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->load_from_radiacode_spectrogram(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_load_from_xml_scan_data___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  std::istream *arg2 = 0 ;
  bool result;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  arg2 = (std::istream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::istream & is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->load_from_xml_scan_data(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_load_from_iaea___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  std::istream *arg2 = 0 ;
  bool result;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  arg2 = (std::istream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::istream & is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->load_from_iaea(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_load_from_chn___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  std::istream *arg2 = 0 ;
  bool result;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  arg2 = (std::istream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::istream & is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->load_from_chn(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_load_from_cnf___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  std::istream *arg2 = 0 ;
  bool result;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  arg2 = (std::istream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::istream & is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->load_from_cnf(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_load_from_tracs_mps___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  std::istream *arg2 = 0 ;
  bool result;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  arg2 = (std::istream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::istream & is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->load_from_tracs_mps(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_load_from_aram___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  std::istream *arg2 = 0 ;
  bool result;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  arg2 = (std::istream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::istream & is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->load_from_aram(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_load_from_json___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  std::istream *arg2 = 0 ;
  bool result;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  arg2 = (std::istream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::istream & is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->load_from_json(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_load_from_caen_gxml___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  std::istream *arg2 = 0 ;
  bool result;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  arg2 = (std::istream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::istream & is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->load_from_caen_gxml(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_cleanup_after_load__SWIG_0___(void * jarg1, unsigned int jarg2) {
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->cleanup_after_load(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_cleanup_after_load__SWIG_1___(void * jarg1) {
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  (arg1)->cleanup_after_load();
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_recalc_total_counts___(void * jarg1) {
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  (arg1)->recalc_total_counts();
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_merge_neutron_meas_into_gamma_meas___(void * jarg1) {
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  (arg1)->merge_neutron_meas_into_gamma_meas();
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_rebin_measurement___(void * jarg1, void * jarg2, void * jarg3) {
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  std::shared_ptr< SpecUtils::EnergyCalibration const > *arg2 = 0 ;
  std::shared_ptr< SpecUtils::Measurement const > *arg3 = 0 ;
  std::shared_ptr< SpecUtils::EnergyCalibration const > tempnull2 ;
  std::shared_ptr< SpecUtils::Measurement const > tempnull3 ;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  arg2 = jarg2 ? (std::shared_ptr< SpecUtils::EnergyCalibration const > *)jarg2 : &tempnull2; 
  arg3 = jarg3 ? (std::shared_ptr< SpecUtils::Measurement const > *)jarg3 : &tempnull3; 
  (arg1)->rebin_measurement((std::shared_ptr< SpecUtils::EnergyCalibration const > const &)*arg2,(std::shared_ptr< SpecUtils::Measurement const > const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_rebin_all_measurements___(void * jarg1, void * jarg2) {
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  std::shared_ptr< SpecUtils::EnergyCalibration const > *arg2 = 0 ;
  std::shared_ptr< SpecUtils::EnergyCalibration const > tempnull2 ;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  arg2 = jarg2 ? (std::shared_ptr< SpecUtils::EnergyCalibration const > *)jarg2 : &tempnull2; 
  (arg1)->rebin_all_measurements((std::shared_ptr< SpecUtils::EnergyCalibration const > const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_set_energy_calibration_from_CALp_file___(void * jarg1, void * jarg2) {
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  std::istream *arg2 = 0 ;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  arg2 = (std::istream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::istream & is null", 0);
    return ;
  } 
  (arg1)->set_energy_calibration_from_CALp_file(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_detector_names_to_numbers___(void * jarg1, void * jarg2) {
  void * jresult ;
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  std::set< int > result;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  arg2 = (std::vector< std::string > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & is null", 0);
    return 0;
  } 
  result = ((SpecUtils::SpecFile const *)arg1)->detector_names_to_numbers((std::vector< std::string > const &)*arg2);
  jresult = new std::set< int >(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_write_to_file__SWIG_0___(void * jarg1, const char * jarg2, int jarg3) {
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  std::string arg2 ;
  SpecUtils::SaveSpectrumAsType arg3 ;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg2)->assign(jarg2); 
  arg3 = (SpecUtils::SaveSpectrumAsType)jarg3; 
  ((SpecUtils::SpecFile const *)arg1)->write_to_file(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_write_to_file__SWIG_1___(void * jarg1, const char * jarg2, void * jarg3, void * jarg4, int jarg5) {
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  std::string arg2 ;
  std::set< int > arg3 ;
  std::set< int > arg4 ;
  SpecUtils::SaveSpectrumAsType arg5 ;
  std::set< int > const *argp3 ;
  std::set< int > const *argp4 ;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg2)->assign(jarg2); 
  argp3 = (std::set< int > *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::set< int > const", 0);
    return ;
  }
  arg3 = *argp3; 
  argp4 = (std::set< int > *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::set< int > const", 0);
    return ;
  }
  arg4 = *argp4; 
  arg5 = (SpecUtils::SaveSpectrumAsType)jarg5; 
  ((SpecUtils::SpecFile const *)arg1)->write_to_file(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_write_to_file__SWIG_2___(void * jarg1, const char * jarg2, void * jarg3, void * jarg4, int jarg5) {
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  std::string arg2 ;
  std::vector< int > arg3 ;
  std::vector< int > arg4 ;
  SpecUtils::SaveSpectrumAsType arg5 ;
  std::vector< int > const *argp3 ;
  std::vector< int > const *argp4 ;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg2)->assign(jarg2); 
  argp3 = (std::vector< int > *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::vector< int > const", 0);
    return ;
  }
  arg3 = *argp3; 
  argp4 = (std::vector< int > *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::vector< int > const", 0);
    return ;
  }
  arg4 = *argp4; 
  arg5 = (SpecUtils::SaveSpectrumAsType)jarg5; 
  ((SpecUtils::SpecFile const *)arg1)->write_to_file(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_write_to_file__SWIG_3___(void * jarg1, const char * jarg2, void * jarg3, void * jarg4, int jarg5) {
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  std::string *arg2 = 0 ;
  std::set< int > *arg3 = 0 ;
  std::vector< std::string > *arg4 = 0 ;
  SpecUtils::SaveSpectrumAsType arg5 ;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (std::set< int > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< int > const & is null", 0);
    return ;
  } 
  arg4 = (std::vector< std::string > *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & is null", 0);
    return ;
  } 
  arg5 = (SpecUtils::SaveSpectrumAsType)jarg5; 
  ((SpecUtils::SpecFile const *)arg1)->write_to_file((std::string const &)*arg2,(std::set< int > const &)*arg3,(std::vector< std::string > const &)*arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_write__SWIG_0___(void * jarg1, void * jarg2, void * jarg3, void * jarg4, int jarg5) {
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  std::ostream *arg2 = 0 ;
  std::set< int > arg3 ;
  std::set< int > arg4 ;
  SpecUtils::SaveSpectrumAsType arg5 ;
  std::set< int > *argp3 ;
  std::set< int > const *argp4 ;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  arg2 = (std::ostream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::ostream & is null", 0);
    return ;
  } 
  argp3 = (std::set< int > *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::set< int >", 0);
    return ;
  }
  arg3 = *argp3; 
  argp4 = (std::set< int > *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::set< int > const", 0);
    return ;
  }
  arg4 = *argp4; 
  arg5 = (SpecUtils::SaveSpectrumAsType)jarg5; 
  ((SpecUtils::SpecFile const *)arg1)->write(*arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_write__SWIG_1___(void * jarg1, void * jarg2, void * jarg3, void * jarg4, int jarg5) {
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  std::ostream *arg2 = 0 ;
  std::set< int > arg3 ;
  std::vector< std::string > *arg4 = 0 ;
  SpecUtils::SaveSpectrumAsType arg5 ;
  std::set< int > *argp3 ;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  arg2 = (std::ostream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::ostream & is null", 0);
    return ;
  } 
  argp3 = (std::set< int > *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::set< int >", 0);
    return ;
  }
  arg3 = *argp3; 
  arg4 = (std::vector< std::string > *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & is null", 0);
    return ;
  } 
  arg5 = (SpecUtils::SaveSpectrumAsType)jarg5; 
  ((SpecUtils::SpecFile const *)arg1)->write(*arg2,arg3,(std::vector< std::string > const &)*arg4,arg5);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_write_pcf___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  std::ostream *arg2 = 0 ;
  bool result;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  arg2 = (std::ostream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::ostream & is null", 0);
    return 0;
  } 
  result = (bool)((SpecUtils::SpecFile const *)arg1)->write_pcf(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_write_2006_N42___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  std::ostream *arg2 = 0 ;
  bool result;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  arg2 = (std::ostream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::ostream & is null", 0);
    return 0;
  } 
  result = (bool)((SpecUtils::SpecFile const *)arg1)->write_2006_N42(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_write_csv___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  std::ostream *arg2 = 0 ;
  bool result;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  arg2 = (std::ostream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::ostream & is null", 0);
    return 0;
  } 
  result = (bool)((SpecUtils::SpecFile const *)arg1)->write_csv(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_write_txt___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  std::ostream *arg2 = 0 ;
  bool result;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  arg2 = (std::ostream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::ostream & is null", 0);
    return 0;
  } 
  result = (bool)((SpecUtils::SpecFile const *)arg1)->write_txt(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_write_integer_chn__SWIG_0___(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  std::ostream *arg2 = 0 ;
  std::set< int > arg3 ;
  std::set< int > *arg4 = 0 ;
  std::set< int > *argp3 ;
  bool result;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  arg2 = (std::ostream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::ostream & is null", 0);
    return 0;
  } 
  argp3 = (std::set< int > *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::set< int >", 0);
    return 0;
  }
  arg3 = *argp3; 
  arg4 = (std::set< int > *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< int > const & is null", 0);
    return 0;
  } 
  result = (bool)((SpecUtils::SpecFile const *)arg1)->write_integer_chn(*arg2,arg3,(std::set< int > const &)*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_write_integer_chn__SWIG_1___(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  std::ostream *arg2 = 0 ;
  std::set< int > arg3 ;
  std::vector< std::string > *arg4 = 0 ;
  std::set< int > *argp3 ;
  bool result;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  arg2 = (std::ostream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::ostream & is null", 0);
    return 0;
  } 
  argp3 = (std::set< int > *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::set< int >", 0);
    return 0;
  }
  arg3 = *argp3; 
  arg4 = (std::vector< std::string > *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & is null", 0);
    return 0;
  } 
  result = (bool)((SpecUtils::SpecFile const *)arg1)->write_integer_chn(*arg2,arg3,(std::vector< std::string > const &)*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_write_binary_spc___(void * jarg1, void * jarg2, int jarg3, void * jarg4, void * jarg5) {
  unsigned int jresult ;
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  std::ostream *arg2 = 0 ;
  SpecUtils::SpecFile::SpcBinaryType arg3 ;
  std::set< int > arg4 ;
  std::set< int > *arg5 = 0 ;
  std::set< int > *argp4 ;
  bool result;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  arg2 = (std::ostream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::ostream & is null", 0);
    return 0;
  } 
  arg3 = (SpecUtils::SpecFile::SpcBinaryType)jarg3; 
  argp4 = (std::set< int > *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::set< int >", 0);
    return 0;
  }
  arg4 = *argp4; 
  arg5 = (std::set< int > *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< int > const & is null", 0);
    return 0;
  } 
  result = (bool)((SpecUtils::SpecFile const *)arg1)->write_binary_spc(*arg2,arg3,arg4,(std::set< int > const &)*arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_write_ascii_spc___(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  std::ostream *arg2 = 0 ;
  std::set< int > arg3 ;
  std::set< int > *arg4 = 0 ;
  std::set< int > *argp3 ;
  bool result;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  arg2 = (std::ostream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::ostream & is null", 0);
    return 0;
  } 
  argp3 = (std::set< int > *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::set< int >", 0);
    return 0;
  }
  arg3 = *argp3; 
  arg4 = (std::set< int > *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< int > const & is null", 0);
    return 0;
  } 
  result = (bool)((SpecUtils::SpecFile const *)arg1)->write_ascii_spc(*arg2,arg3,(std::set< int > const &)*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_write_binary_exploranium_gr130v0___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  std::ostream *arg2 = 0 ;
  bool result;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  arg2 = (std::ostream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::ostream & is null", 0);
    return 0;
  } 
  result = (bool)((SpecUtils::SpecFile const *)arg1)->write_binary_exploranium_gr130v0(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_write_binary_exploranium_gr135v2___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  std::ostream *arg2 = 0 ;
  bool result;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  arg2 = (std::ostream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::ostream & is null", 0);
    return 0;
  } 
  result = (bool)((SpecUtils::SpecFile const *)arg1)->write_binary_exploranium_gr135v2(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_write_iaea_spe___(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  std::ostream *arg2 = 0 ;
  std::set< int > arg3 ;
  std::set< int > *arg4 = 0 ;
  std::set< int > *argp3 ;
  bool result;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  arg2 = (std::ostream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::ostream & is null", 0);
    return 0;
  } 
  argp3 = (std::set< int > *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::set< int >", 0);
    return 0;
  }
  arg3 = *argp3; 
  arg4 = (std::set< int > *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< int > const & is null", 0);
    return 0;
  } 
  result = (bool)((SpecUtils::SpecFile const *)arg1)->write_iaea_spe(*arg2,arg3,(std::set< int > const &)*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_write_cnf___(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  std::ostream *arg2 = 0 ;
  std::set< int > arg3 ;
  std::set< int > *arg4 = 0 ;
  std::set< int > *argp3 ;
  bool result;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  arg2 = (std::ostream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::ostream & is null", 0);
    return 0;
  } 
  argp3 = (std::set< int > *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::set< int >", 0);
    return 0;
  }
  arg3 = *argp3; 
  arg4 = (std::set< int > *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< int > const & is null", 0);
    return 0;
  } 
  result = (bool)((SpecUtils::SpecFile const *)arg1)->write_cnf(*arg2,arg3,(std::set< int > const &)*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_write_tka___(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  std::ostream *arg2 = 0 ;
  std::set< int > arg3 ;
  std::set< int > *arg4 = 0 ;
  std::set< int > *argp3 ;
  bool result;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  arg2 = (std::ostream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::ostream & is null", 0);
    return 0;
  } 
  argp3 = (std::set< int > *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::set< int >", 0);
    return 0;
  }
  arg3 = *argp3; 
  arg4 = (std::set< int > *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< int > const & is null", 0);
    return 0;
  } 
  result = (bool)((SpecUtils::SpecFile const *)arg1)->write_tka(*arg2,arg3,(std::set< int > const &)*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_2012N42_VERSION_get___() {
  int jresult ;
  int result;
  
  result = (int)(5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_create_2012_N42_xml___(void * jarg1) {
  void * jresult ;
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  SwigValueWrapper< std::shared_ptr< ::rapidxml::xml_document< char > > > result;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  result = ((SpecUtils::SpecFile const *)arg1)->create_2012_N42_xml();
  jresult = new std::shared_ptr< ::rapidxml::xml_document< char > >(result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_write_2012_N42___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  std::ostream *arg2 = 0 ;
  bool result;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  arg2 = (std::ostream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::ostream & is null", 0);
    return 0;
  } 
  result = (bool)((SpecUtils::SpecFile const *)arg1)->write_2012_N42(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_mutex___(void * jarg1) {
  void * jresult ;
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  std::recursive_mutex *result = 0 ;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  result = (std::recursive_mutex *) &((SpecUtils::SpecFile const *)arg1)->mutex();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_measurement_at___(void * jarg1, int jarg2) {
  void * jresult ;
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  int arg2 ;
  std::shared_ptr< SpecUtils::Measurement const > result;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  arg2 = (int)jarg2; 
  result = SpecUtils_SpecFile_measurement_at(arg1,arg2);
  jresult = result ? new std::shared_ptr< SpecUtils::Measurement const >(result) : 0; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SandiafSpecUtils_SpecFile_get_max_channel_count___(void * jarg1) {
  int jresult ;
  SpecUtils::SpecFile *arg1 = (SpecUtils::SpecFile *) 0 ;
  int result;
  
  arg1 = (SpecUtils::SpecFile *)jarg1; 
  result = (int)SpecUtils_SpecFile_get_max_channel_count(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_DetectorAnalysisResult_remark__set___(void * jarg1, const char * jarg2) {
  SpecUtils::DetectorAnalysisResult *arg1 = (SpecUtils::DetectorAnalysisResult *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (SpecUtils::DetectorAnalysisResult *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->remark_ = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_SandiafSpecUtils_DetectorAnalysisResult_remark__get___(void * jarg1) {
  const char * jresult ;
  SpecUtils::DetectorAnalysisResult *arg1 = (SpecUtils::DetectorAnalysisResult *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (SpecUtils::DetectorAnalysisResult *)jarg1; 
  result = (std::string *) & ((arg1)->remark_);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_DetectorAnalysisResult_nuclide__set___(void * jarg1, const char * jarg2) {
  SpecUtils::DetectorAnalysisResult *arg1 = (SpecUtils::DetectorAnalysisResult *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (SpecUtils::DetectorAnalysisResult *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->nuclide_ = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_SandiafSpecUtils_DetectorAnalysisResult_nuclide__get___(void * jarg1) {
  const char * jresult ;
  SpecUtils::DetectorAnalysisResult *arg1 = (SpecUtils::DetectorAnalysisResult *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (SpecUtils::DetectorAnalysisResult *)jarg1; 
  result = (std::string *) & ((arg1)->nuclide_);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_DetectorAnalysisResult_activity__set___(void * jarg1, float jarg2) {
  SpecUtils::DetectorAnalysisResult *arg1 = (SpecUtils::DetectorAnalysisResult *) 0 ;
  float arg2 ;
  
  arg1 = (SpecUtils::DetectorAnalysisResult *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->activity_ = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_SandiafSpecUtils_DetectorAnalysisResult_activity__get___(void * jarg1) {
  float jresult ;
  SpecUtils::DetectorAnalysisResult *arg1 = (SpecUtils::DetectorAnalysisResult *) 0 ;
  float result;
  
  arg1 = (SpecUtils::DetectorAnalysisResult *)jarg1; 
  result = (float) ((arg1)->activity_);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_DetectorAnalysisResult_nuclide_type__set___(void * jarg1, const char * jarg2) {
  SpecUtils::DetectorAnalysisResult *arg1 = (SpecUtils::DetectorAnalysisResult *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (SpecUtils::DetectorAnalysisResult *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->nuclide_type_ = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_SandiafSpecUtils_DetectorAnalysisResult_nuclide_type__get___(void * jarg1) {
  const char * jresult ;
  SpecUtils::DetectorAnalysisResult *arg1 = (SpecUtils::DetectorAnalysisResult *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (SpecUtils::DetectorAnalysisResult *)jarg1; 
  result = (std::string *) & ((arg1)->nuclide_type_);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_DetectorAnalysisResult_id_confidence__set___(void * jarg1, const char * jarg2) {
  SpecUtils::DetectorAnalysisResult *arg1 = (SpecUtils::DetectorAnalysisResult *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (SpecUtils::DetectorAnalysisResult *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->id_confidence_ = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_SandiafSpecUtils_DetectorAnalysisResult_id_confidence__get___(void * jarg1) {
  const char * jresult ;
  SpecUtils::DetectorAnalysisResult *arg1 = (SpecUtils::DetectorAnalysisResult *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (SpecUtils::DetectorAnalysisResult *)jarg1; 
  result = (std::string *) & ((arg1)->id_confidence_);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_DetectorAnalysisResult_distance__set___(void * jarg1, float jarg2) {
  SpecUtils::DetectorAnalysisResult *arg1 = (SpecUtils::DetectorAnalysisResult *) 0 ;
  float arg2 ;
  
  arg1 = (SpecUtils::DetectorAnalysisResult *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->distance_ = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_SandiafSpecUtils_DetectorAnalysisResult_distance__get___(void * jarg1) {
  float jresult ;
  SpecUtils::DetectorAnalysisResult *arg1 = (SpecUtils::DetectorAnalysisResult *) 0 ;
  float result;
  
  arg1 = (SpecUtils::DetectorAnalysisResult *)jarg1; 
  result = (float) ((arg1)->distance_);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_DetectorAnalysisResult_dose_rate__set___(void * jarg1, float jarg2) {
  SpecUtils::DetectorAnalysisResult *arg1 = (SpecUtils::DetectorAnalysisResult *) 0 ;
  float arg2 ;
  
  arg1 = (SpecUtils::DetectorAnalysisResult *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->dose_rate_ = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_SandiafSpecUtils_DetectorAnalysisResult_dose_rate__get___(void * jarg1) {
  float jresult ;
  SpecUtils::DetectorAnalysisResult *arg1 = (SpecUtils::DetectorAnalysisResult *) 0 ;
  float result;
  
  arg1 = (SpecUtils::DetectorAnalysisResult *)jarg1; 
  result = (float) ((arg1)->dose_rate_);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_DetectorAnalysisResult_real_time__set___(void * jarg1, float jarg2) {
  SpecUtils::DetectorAnalysisResult *arg1 = (SpecUtils::DetectorAnalysisResult *) 0 ;
  float arg2 ;
  
  arg1 = (SpecUtils::DetectorAnalysisResult *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->real_time_ = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_SandiafSpecUtils_DetectorAnalysisResult_real_time__get___(void * jarg1) {
  float jresult ;
  SpecUtils::DetectorAnalysisResult *arg1 = (SpecUtils::DetectorAnalysisResult *) 0 ;
  float result;
  
  arg1 = (SpecUtils::DetectorAnalysisResult *)jarg1; 
  result = (float) ((arg1)->real_time_);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_DetectorAnalysisResult_detector__set___(void * jarg1, const char * jarg2) {
  SpecUtils::DetectorAnalysisResult *arg1 = (SpecUtils::DetectorAnalysisResult *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (SpecUtils::DetectorAnalysisResult *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->detector_ = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_SandiafSpecUtils_DetectorAnalysisResult_detector__get___(void * jarg1) {
  const char * jresult ;
  SpecUtils::DetectorAnalysisResult *arg1 = (SpecUtils::DetectorAnalysisResult *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (SpecUtils::DetectorAnalysisResult *)jarg1; 
  result = (std::string *) & ((arg1)->detector_);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SandiafSpecUtils_new_DetectorAnalysisResult___() {
  void * jresult ;
  SpecUtils::DetectorAnalysisResult *result = 0 ;
  
  result = (SpecUtils::DetectorAnalysisResult *)new SpecUtils::DetectorAnalysisResult();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_DetectorAnalysisResult_reset___(void * jarg1) {
  SpecUtils::DetectorAnalysisResult *arg1 = (SpecUtils::DetectorAnalysisResult *) 0 ;
  
  arg1 = (SpecUtils::DetectorAnalysisResult *)jarg1; 
  (arg1)->reset();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SandiafSpecUtils_DetectorAnalysisResult_isEmpty___(void * jarg1) {
  unsigned int jresult ;
  SpecUtils::DetectorAnalysisResult *arg1 = (SpecUtils::DetectorAnalysisResult *) 0 ;
  bool result;
  
  arg1 = (SpecUtils::DetectorAnalysisResult *)jarg1; 
  result = (bool)((SpecUtils::DetectorAnalysisResult const *)arg1)->isEmpty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_delete_DetectorAnalysisResult___(void * jarg1) {
  SpecUtils::DetectorAnalysisResult *arg1 = (SpecUtils::DetectorAnalysisResult *) 0 ;
  
  arg1 = (SpecUtils::DetectorAnalysisResult *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_DetectorAnalysis_remarks__set___(void * jarg1, void * jarg2) {
  SpecUtils::DetectorAnalysis *arg1 = (SpecUtils::DetectorAnalysis *) 0 ;
  std::vector< std::string > *arg2 = (std::vector< std::string > *) 0 ;
  
  arg1 = (SpecUtils::DetectorAnalysis *)jarg1; 
  arg2 = (std::vector< std::string > *)jarg2; 
  if (arg1) (arg1)->remarks_ = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SandiafSpecUtils_DetectorAnalysis_remarks__get___(void * jarg1) {
  void * jresult ;
  SpecUtils::DetectorAnalysis *arg1 = (SpecUtils::DetectorAnalysis *) 0 ;
  std::vector< std::string > *result = 0 ;
  
  arg1 = (SpecUtils::DetectorAnalysis *)jarg1; 
  result = (std::vector< std::string > *)& ((arg1)->remarks_);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_DetectorAnalysis_algorithm_name__set___(void * jarg1, const char * jarg2) {
  SpecUtils::DetectorAnalysis *arg1 = (SpecUtils::DetectorAnalysis *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (SpecUtils::DetectorAnalysis *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->algorithm_name_ = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_SandiafSpecUtils_DetectorAnalysis_algorithm_name__get___(void * jarg1) {
  const char * jresult ;
  SpecUtils::DetectorAnalysis *arg1 = (SpecUtils::DetectorAnalysis *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (SpecUtils::DetectorAnalysis *)jarg1; 
  result = (std::string *) & ((arg1)->algorithm_name_);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_DetectorAnalysis_algorithm_component_versions__set___(void * jarg1, void * jarg2) {
  SpecUtils::DetectorAnalysis *arg1 = (SpecUtils::DetectorAnalysis *) 0 ;
  std::vector< std::pair< std::string,std::string > > *arg2 = (std::vector< std::pair< std::string,std::string > > *) 0 ;
  
  arg1 = (SpecUtils::DetectorAnalysis *)jarg1; 
  arg2 = (std::vector< std::pair< std::string,std::string > > *)jarg2; 
  if (arg1) (arg1)->algorithm_component_versions_ = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SandiafSpecUtils_DetectorAnalysis_algorithm_component_versions__get___(void * jarg1) {
  void * jresult ;
  SpecUtils::DetectorAnalysis *arg1 = (SpecUtils::DetectorAnalysis *) 0 ;
  std::vector< std::pair< std::string,std::string > > *result = 0 ;
  
  arg1 = (SpecUtils::DetectorAnalysis *)jarg1; 
  result = (std::vector< std::pair< std::string,std::string > > *)& ((arg1)->algorithm_component_versions_);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_DetectorAnalysis_algorithm_creator__set___(void * jarg1, const char * jarg2) {
  SpecUtils::DetectorAnalysis *arg1 = (SpecUtils::DetectorAnalysis *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (SpecUtils::DetectorAnalysis *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->algorithm_creator_ = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_SandiafSpecUtils_DetectorAnalysis_algorithm_creator__get___(void * jarg1) {
  const char * jresult ;
  SpecUtils::DetectorAnalysis *arg1 = (SpecUtils::DetectorAnalysis *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (SpecUtils::DetectorAnalysis *)jarg1; 
  result = (std::string *) & ((arg1)->algorithm_creator_);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_DetectorAnalysis_algorithm_description__set___(void * jarg1, const char * jarg2) {
  SpecUtils::DetectorAnalysis *arg1 = (SpecUtils::DetectorAnalysis *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (SpecUtils::DetectorAnalysis *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->algorithm_description_ = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_SandiafSpecUtils_DetectorAnalysis_algorithm_description__get___(void * jarg1) {
  const char * jresult ;
  SpecUtils::DetectorAnalysis *arg1 = (SpecUtils::DetectorAnalysis *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (SpecUtils::DetectorAnalysis *)jarg1; 
  result = (std::string *) & ((arg1)->algorithm_description_);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_DetectorAnalysis_analysis_start_time__set___(void * jarg1, void * jarg2) {
  SpecUtils::DetectorAnalysis *arg1 = (SpecUtils::DetectorAnalysis *) 0 ;
  SpecUtils::time_point_t arg2 ;
  SpecUtils::time_point_t *argp2 ;
  
  arg1 = (SpecUtils::DetectorAnalysis *)jarg1; 
  argp2 = (SpecUtils::time_point_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null SpecUtils::time_point_t", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->analysis_start_time_ = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SandiafSpecUtils_DetectorAnalysis_analysis_start_time__get___(void * jarg1) {
  void * jresult ;
  SpecUtils::DetectorAnalysis *arg1 = (SpecUtils::DetectorAnalysis *) 0 ;
  SpecUtils::time_point_t result;
  
  arg1 = (SpecUtils::DetectorAnalysis *)jarg1; 
  result =  ((arg1)->analysis_start_time_);
  jresult = new SpecUtils::time_point_t(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_DetectorAnalysis_analysis_computation_duration__set___(void * jarg1, float jarg2) {
  SpecUtils::DetectorAnalysis *arg1 = (SpecUtils::DetectorAnalysis *) 0 ;
  float arg2 ;
  
  arg1 = (SpecUtils::DetectorAnalysis *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->analysis_computation_duration_ = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_SandiafSpecUtils_DetectorAnalysis_analysis_computation_duration__get___(void * jarg1) {
  float jresult ;
  SpecUtils::DetectorAnalysis *arg1 = (SpecUtils::DetectorAnalysis *) 0 ;
  float result;
  
  arg1 = (SpecUtils::DetectorAnalysis *)jarg1; 
  result = (float) ((arg1)->analysis_computation_duration_);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_DetectorAnalysis_algorithm_result_description__set___(void * jarg1, const char * jarg2) {
  SpecUtils::DetectorAnalysis *arg1 = (SpecUtils::DetectorAnalysis *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (SpecUtils::DetectorAnalysis *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->algorithm_result_description_ = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_SandiafSpecUtils_DetectorAnalysis_algorithm_result_description__get___(void * jarg1) {
  const char * jresult ;
  SpecUtils::DetectorAnalysis *arg1 = (SpecUtils::DetectorAnalysis *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (SpecUtils::DetectorAnalysis *)jarg1; 
  result = (std::string *) & ((arg1)->algorithm_result_description_);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_DetectorAnalysis_results__set___(void * jarg1, void * jarg2) {
  SpecUtils::DetectorAnalysis *arg1 = (SpecUtils::DetectorAnalysis *) 0 ;
  std::vector< SpecUtils::DetectorAnalysisResult > *arg2 = (std::vector< SpecUtils::DetectorAnalysisResult > *) 0 ;
  
  arg1 = (SpecUtils::DetectorAnalysis *)jarg1; 
  arg2 = (std::vector< SpecUtils::DetectorAnalysisResult > *)jarg2; 
  if (arg1) (arg1)->results_ = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SandiafSpecUtils_DetectorAnalysis_results__get___(void * jarg1) {
  void * jresult ;
  SpecUtils::DetectorAnalysis *arg1 = (SpecUtils::DetectorAnalysis *) 0 ;
  std::vector< SpecUtils::DetectorAnalysisResult > *result = 0 ;
  
  arg1 = (SpecUtils::DetectorAnalysis *)jarg1; 
  result = (std::vector< SpecUtils::DetectorAnalysisResult > *)& ((arg1)->results_);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SandiafSpecUtils_new_DetectorAnalysis___() {
  void * jresult ;
  SpecUtils::DetectorAnalysis *result = 0 ;
  
  result = (SpecUtils::DetectorAnalysis *)new SpecUtils::DetectorAnalysis();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_DetectorAnalysis_reset___(void * jarg1) {
  SpecUtils::DetectorAnalysis *arg1 = (SpecUtils::DetectorAnalysis *) 0 ;
  
  arg1 = (SpecUtils::DetectorAnalysis *)jarg1; 
  (arg1)->reset();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SandiafSpecUtils_DetectorAnalysis_is_empty___(void * jarg1) {
  unsigned int jresult ;
  SpecUtils::DetectorAnalysis *arg1 = (SpecUtils::DetectorAnalysis *) 0 ;
  bool result;
  
  arg1 = (SpecUtils::DetectorAnalysis *)jarg1; 
  result = (bool)((SpecUtils::DetectorAnalysis const *)arg1)->is_empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_delete_DetectorAnalysis___(void * jarg1) {
  SpecUtils::DetectorAnalysis *arg1 = (SpecUtils::DetectorAnalysis *) 0 ;
  
  arg1 = (SpecUtils::DetectorAnalysis *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_MultimediaData_remark__set___(void * jarg1, const char * jarg2) {
  SpecUtils::MultimediaData *arg1 = (SpecUtils::MultimediaData *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (SpecUtils::MultimediaData *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->remark_ = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_SandiafSpecUtils_MultimediaData_remark__get___(void * jarg1) {
  const char * jresult ;
  SpecUtils::MultimediaData *arg1 = (SpecUtils::MultimediaData *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (SpecUtils::MultimediaData *)jarg1; 
  result = (std::string *) & ((arg1)->remark_);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_MultimediaData_descriptions__set___(void * jarg1, const char * jarg2) {
  SpecUtils::MultimediaData *arg1 = (SpecUtils::MultimediaData *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (SpecUtils::MultimediaData *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->descriptions_ = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_SandiafSpecUtils_MultimediaData_descriptions__get___(void * jarg1) {
  const char * jresult ;
  SpecUtils::MultimediaData *arg1 = (SpecUtils::MultimediaData *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (SpecUtils::MultimediaData *)jarg1; 
  result = (std::string *) & ((arg1)->descriptions_);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_MultimediaData_data__set___(void * jarg1, void * jarg2) {
  SpecUtils::MultimediaData *arg1 = (SpecUtils::MultimediaData *) 0 ;
  std::vector< char > *arg2 = (std::vector< char > *) 0 ;
  
  arg1 = (SpecUtils::MultimediaData *)jarg1; 
  arg2 = (std::vector< char > *)jarg2; 
  if (arg1) (arg1)->data_ = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SandiafSpecUtils_MultimediaData_data__get___(void * jarg1) {
  void * jresult ;
  SpecUtils::MultimediaData *arg1 = (SpecUtils::MultimediaData *) 0 ;
  std::vector< char > *result = 0 ;
  
  arg1 = (SpecUtils::MultimediaData *)jarg1; 
  result = (std::vector< char > *)& ((arg1)->data_);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_MultimediaData_data_encoding__set___(void * jarg1, int jarg2) {
  SpecUtils::MultimediaData *arg1 = (SpecUtils::MultimediaData *) 0 ;
  SpecUtils::MultimediaData::EncodingType arg2 ;
  
  arg1 = (SpecUtils::MultimediaData *)jarg1; 
  arg2 = (SpecUtils::MultimediaData::EncodingType)jarg2; 
  if (arg1) (arg1)->data_encoding_ = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SandiafSpecUtils_MultimediaData_data_encoding__get___(void * jarg1) {
  int jresult ;
  SpecUtils::MultimediaData *arg1 = (SpecUtils::MultimediaData *) 0 ;
  SpecUtils::MultimediaData::EncodingType result;
  
  arg1 = (SpecUtils::MultimediaData *)jarg1; 
  result = (SpecUtils::MultimediaData::EncodingType) ((arg1)->data_encoding_);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_MultimediaData_capture_start_time__set___(void * jarg1, void * jarg2) {
  SpecUtils::MultimediaData *arg1 = (SpecUtils::MultimediaData *) 0 ;
  SpecUtils::time_point_t arg2 ;
  SpecUtils::time_point_t *argp2 ;
  
  arg1 = (SpecUtils::MultimediaData *)jarg1; 
  argp2 = (SpecUtils::time_point_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null SpecUtils::time_point_t", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->capture_start_time_ = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SandiafSpecUtils_MultimediaData_capture_start_time__get___(void * jarg1) {
  void * jresult ;
  SpecUtils::MultimediaData *arg1 = (SpecUtils::MultimediaData *) 0 ;
  SpecUtils::time_point_t result;
  
  arg1 = (SpecUtils::MultimediaData *)jarg1; 
  result =  ((arg1)->capture_start_time_);
  jresult = new SpecUtils::time_point_t(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_MultimediaData_file_uri__set___(void * jarg1, const char * jarg2) {
  SpecUtils::MultimediaData *arg1 = (SpecUtils::MultimediaData *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (SpecUtils::MultimediaData *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->file_uri_ = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_SandiafSpecUtils_MultimediaData_file_uri__get___(void * jarg1) {
  const char * jresult ;
  SpecUtils::MultimediaData *arg1 = (SpecUtils::MultimediaData *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (SpecUtils::MultimediaData *)jarg1; 
  result = (std::string *) & ((arg1)->file_uri_);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_MultimediaData_mime_type__set___(void * jarg1, const char * jarg2) {
  SpecUtils::MultimediaData *arg1 = (SpecUtils::MultimediaData *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (SpecUtils::MultimediaData *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->mime_type_ = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_SandiafSpecUtils_MultimediaData_mime_type__get___(void * jarg1) {
  const char * jresult ;
  SpecUtils::MultimediaData *arg1 = (SpecUtils::MultimediaData *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (SpecUtils::MultimediaData *)jarg1; 
  result = (std::string *) & ((arg1)->mime_type_);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SandiafSpecUtils_new_MultimediaData___() {
  void * jresult ;
  SpecUtils::MultimediaData *result = 0 ;
  
  result = (SpecUtils::MultimediaData *)new SpecUtils::MultimediaData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_delete_MultimediaData___(void * jarg1) {
  SpecUtils::MultimediaData *arg1 = (SpecUtils::MultimediaData *) 0 ;
  
  arg1 = (SpecUtils::MultimediaData *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SandiafSpecUtils_pcf_det_name_to_dev_pair_index___(const char * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  int jresult ;
  std::string arg1 ;
  int *arg2 = 0 ;
  int *arg3 = 0 ;
  int *arg4 = 0 ;
  int result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg1)->assign(jarg1); 
  arg2 = (int *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int & is null", 0);
    return 0;
  } 
  arg3 = (int *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int & is null", 0);
    return 0;
  } 
  arg4 = (int *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int & is null", 0);
    return 0;
  } 
  result = (int)SpecUtils::pcf_det_name_to_dev_pair_index(SWIG_STD_MOVE(arg1),*arg2,*arg3,*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SandiafSpecUtils_new_DevPair__SWIG_0___() {
  void * jresult ;
  std::pair< float,float > *result = 0 ;
  
  result = (std::pair< float,float > *)new std::pair< float,float >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SandiafSpecUtils_new_DevPair__SWIG_1___(float jarg1, float jarg2) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  std::pair< float,float > *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  result = (std::pair< float,float > *)new std::pair< float,float >(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SandiafSpecUtils_new_DevPair__SWIG_2___(void * jarg1) {
  void * jresult ;
  std::pair< float,float > *arg1 = 0 ;
  std::pair< float,float > *result = 0 ;
  
  arg1 = (std::pair< float,float > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::pair< float,float > const & is null", 0);
    return 0;
  } 
  result = (std::pair< float,float > *)new std::pair< float,float >((std::pair< float,float > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_DevPair_first_set___(void * jarg1, float jarg2) {
  std::pair< float,float > *arg1 = (std::pair< float,float > *) 0 ;
  float arg2 ;
  
  arg1 = (std::pair< float,float > *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->first = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_SandiafSpecUtils_DevPair_first_get___(void * jarg1) {
  float jresult ;
  std::pair< float,float > *arg1 = (std::pair< float,float > *) 0 ;
  float result;
  
  arg1 = (std::pair< float,float > *)jarg1; 
  result = (float) ((arg1)->first);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_DevPair_second_set___(void * jarg1, float jarg2) {
  std::pair< float,float > *arg1 = (std::pair< float,float > *) 0 ;
  float arg2 ;
  
  arg1 = (std::pair< float,float > *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->second = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_SandiafSpecUtils_DevPair_second_get___(void * jarg1) {
  float jresult ;
  std::pair< float,float > *arg1 = (std::pair< float,float > *) 0 ;
  float result;
  
  arg1 = (std::pair< float,float > *)jarg1; 
  result = (float) ((arg1)->second);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_delete_DevPair___(void * jarg1) {
  std::pair< float,float > *arg1 = (std::pair< float,float > *) 0 ;
  
  arg1 = (std::pair< float,float > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SandiafSpecUtils_new_DeviationPairs__SWIG_0___() {
  void * jresult ;
  std::vector< std::pair< float,float > > *result = 0 ;
  
  result = (std::vector< std::pair< float,float > > *)new std::vector< std::pair< float,float > >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SandiafSpecUtils_new_DeviationPairs__SWIG_1___(void * jarg1) {
  void * jresult ;
  std::vector< std::pair< float,float > > *arg1 = 0 ;
  std::vector< std::pair< float,float > > *result = 0 ;
  
  arg1 = (std::vector< std::pair< float,float > > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::pair< float,float > > const & is null", 0);
    return 0;
  } 
  result = (std::vector< std::pair< float,float > > *)new std::vector< std::pair< float,float > >((std::vector< std::pair< float,float > > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_DeviationPairs_Clear___(void * jarg1) {
  std::vector< std::pair< float,float > > *arg1 = (std::vector< std::pair< float,float > > *) 0 ;
  
  arg1 = (std::vector< std::pair< float,float > > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_DeviationPairs_Add___(void * jarg1, void * jarg2) {
  std::vector< std::pair< float,float > > *arg1 = (std::vector< std::pair< float,float > > *) 0 ;
  std::pair< float,float > *arg2 = 0 ;
  
  arg1 = (std::vector< std::pair< float,float > > *)jarg1; 
  arg2 = (std::pair< float,float > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::pair< float,float > const & is null", 0);
    return ;
  } 
  (arg1)->push_back((std::pair< float,float > const &)*arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_SandiafSpecUtils_DeviationPairs_size___(void * jarg1) {
  int jresult ;
  std::vector< std::pair< float,float > > *arg1 = (std::vector< std::pair< float,float > > *) 0 ;
  std::vector< std::pair< float,float > >::size_type result;
  
  arg1 = (std::vector< std::pair< float,float > > *)jarg1; 
  result = ((std::vector< std::pair< float,float > > const *)arg1)->size();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SandiafSpecUtils_DeviationPairs_empty___(void * jarg1) {
  unsigned int jresult ;
  std::vector< std::pair< float,float > > *arg1 = (std::vector< std::pair< float,float > > *) 0 ;
  bool result;
  
  arg1 = (std::vector< std::pair< float,float > > *)jarg1; 
  result = (bool)((std::vector< std::pair< float,float > > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SandiafSpecUtils_DeviationPairs_capacity___(void * jarg1) {
  int jresult ;
  std::vector< std::pair< float,float > > *arg1 = (std::vector< std::pair< float,float > > *) 0 ;
  std::vector< std::pair< float,float > >::size_type result;
  
  arg1 = (std::vector< std::pair< float,float > > *)jarg1; 
  result = ((std::vector< std::pair< float,float > > const *)arg1)->capacity();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_DeviationPairs_reserve___(void * jarg1, int jarg2) {
  std::vector< std::pair< float,float > > *arg1 = (std::vector< std::pair< float,float > > *) 0 ;
  std::vector< std::pair< float,float > >::size_type arg2 ;
  
  arg1 = (std::vector< std::pair< float,float > > *)jarg1; 
  arg2 = (std::vector< std::pair< float,float > >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SandiafSpecUtils_new_DeviationPairs__SWIG_2___(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< std::pair< float,float > > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< std::pair< float,float > > *)new_std_vector_Sl_std_pair_Sl_float_Sc_float_Sg__Sg___SWIG_2(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SandiafSpecUtils_DeviationPairs_getitemcopy___(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< std::pair< float,float > > *arg1 = (std::vector< std::pair< float,float > > *) 0 ;
  int arg2 ;
  std::pair< float,float > result;
  
  arg1 = (std::vector< std::pair< float,float > > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_std_pair_Sl_float_Sc_float_Sg__Sg__getitemcopy(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = new std::pair< float,float >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SandiafSpecUtils_DeviationPairs_getitem___(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< std::pair< float,float > > *arg1 = (std::vector< std::pair< float,float > > *) 0 ;
  int arg2 ;
  std::vector< std::pair< float,float > >::value_type *result = 0 ;
  
  arg1 = (std::vector< std::pair< float,float > > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::pair< float,float > >::value_type *) &std_vector_Sl_std_pair_Sl_float_Sc_float_Sg__Sg__getitem(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_DeviationPairs_setitem___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::pair< float,float > > *arg1 = (std::vector< std::pair< float,float > > *) 0 ;
  int arg2 ;
  std::pair< float,float > *arg3 = 0 ;
  
  arg1 = (std::vector< std::pair< float,float > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::pair< float,float > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::pair< float,float > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_std_pair_Sl_float_Sc_float_Sg__Sg__setitem(arg1,arg2,(std::pair< float,float > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_DeviationPairs_AddRange___(void * jarg1, void * jarg2) {
  std::vector< std::pair< float,float > > *arg1 = (std::vector< std::pair< float,float > > *) 0 ;
  std::vector< std::pair< float,float > > *arg2 = 0 ;
  
  arg1 = (std::vector< std::pair< float,float > > *)jarg1; 
  arg2 = (std::vector< std::pair< float,float > > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::pair< float,float > > const & is null", 0);
    return ;
  } 
  std_vector_Sl_std_pair_Sl_float_Sc_float_Sg__Sg__AddRange(arg1,(std::vector< std::pair< float,float > > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SandiafSpecUtils_DeviationPairs_GetRange___(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< std::pair< float,float > > *arg1 = (std::vector< std::pair< float,float > > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< std::pair< float,float > > *result = 0 ;
  
  arg1 = (std::vector< std::pair< float,float > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< std::pair< float,float > > *)std_vector_Sl_std_pair_Sl_float_Sc_float_Sg__Sg__GetRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_DeviationPairs_Insert___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::pair< float,float > > *arg1 = (std::vector< std::pair< float,float > > *) 0 ;
  int arg2 ;
  std::pair< float,float > *arg3 = 0 ;
  
  arg1 = (std::vector< std::pair< float,float > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::pair< float,float > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::pair< float,float > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_std_pair_Sl_float_Sc_float_Sg__Sg__Insert(arg1,arg2,(std::pair< float,float > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_DeviationPairs_InsertRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::pair< float,float > > *arg1 = (std::vector< std::pair< float,float > > *) 0 ;
  int arg2 ;
  std::vector< std::pair< float,float > > *arg3 = 0 ;
  
  arg1 = (std::vector< std::pair< float,float > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< std::pair< float,float > > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::pair< float,float > > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_std_pair_Sl_float_Sc_float_Sg__Sg__InsertRange(arg1,arg2,(std::vector< std::pair< float,float > > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_DeviationPairs_RemoveAt___(void * jarg1, int jarg2) {
  std::vector< std::pair< float,float > > *arg1 = (std::vector< std::pair< float,float > > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< std::pair< float,float > > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_std_pair_Sl_float_Sc_float_Sg__Sg__RemoveAt(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_DeviationPairs_RemoveRange___(void * jarg1, int jarg2, int jarg3) {
  std::vector< std::pair< float,float > > *arg1 = (std::vector< std::pair< float,float > > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< std::pair< float,float > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_std_pair_Sl_float_Sc_float_Sg__Sg__RemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SandiafSpecUtils_DeviationPairs_Repeat___(void * jarg1, int jarg2) {
  void * jresult ;
  std::pair< float,float > *arg1 = 0 ;
  int arg2 ;
  std::vector< std::pair< float,float > > *result = 0 ;
  
  arg1 = (std::pair< float,float > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::pair< float,float > const & is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::pair< float,float > > *)std_vector_Sl_std_pair_Sl_float_Sc_float_Sg__Sg__Repeat((std::pair< float,float > const &)*arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_DeviationPairs_Reverse__SWIG_0___(void * jarg1) {
  std::vector< std::pair< float,float > > *arg1 = (std::vector< std::pair< float,float > > *) 0 ;
  
  arg1 = (std::vector< std::pair< float,float > > *)jarg1; 
  std_vector_Sl_std_pair_Sl_float_Sc_float_Sg__Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_DeviationPairs_Reverse__SWIG_1___(void * jarg1, int jarg2, int jarg3) {
  std::vector< std::pair< float,float > > *arg1 = (std::vector< std::pair< float,float > > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< std::pair< float,float > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_std_pair_Sl_float_Sc_float_Sg__Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_DeviationPairs_SetRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::pair< float,float > > *arg1 = (std::vector< std::pair< float,float > > *) 0 ;
  int arg2 ;
  std::vector< std::pair< float,float > > *arg3 = 0 ;
  
  arg1 = (std::vector< std::pair< float,float > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< std::pair< float,float > > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::pair< float,float > > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_std_pair_Sl_float_Sc_float_Sg__Sg__SetRange(arg1,arg2,(std::vector< std::pair< float,float > > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_delete_DeviationPairs___(void * jarg1) {
  std::vector< std::pair< float,float > > *arg1 = (std::vector< std::pair< float,float > > *) 0 ;
  
  arg1 = (std::vector< std::pair< float,float > > *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SandiafSpecUtils_EnergyCalibration_type___(void * jarg1) {
  int jresult ;
  SpecUtils::EnergyCalibration *arg1 = (SpecUtils::EnergyCalibration *) 0 ;
  std::shared_ptr< SpecUtils::EnergyCalibration const > *smartarg1 = 0 ;
  SpecUtils::EnergyCalType result;
  
  
  smartarg1 = (std::shared_ptr< const SpecUtils::EnergyCalibration > *)jarg1;
  arg1 = (SpecUtils::EnergyCalibration *)(smartarg1 ? smartarg1->get() : 0); 
  result = (SpecUtils::EnergyCalType)((SpecUtils::EnergyCalibration const *)arg1)->type();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SandiafSpecUtils_EnergyCalibration_valid___(void * jarg1) {
  unsigned int jresult ;
  SpecUtils::EnergyCalibration *arg1 = (SpecUtils::EnergyCalibration *) 0 ;
  std::shared_ptr< SpecUtils::EnergyCalibration const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const SpecUtils::EnergyCalibration > *)jarg1;
  arg1 = (SpecUtils::EnergyCalibration *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)((SpecUtils::EnergyCalibration const *)arg1)->valid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SandiafSpecUtils_EnergyCalibration_coefficients___(void * jarg1) {
  void * jresult ;
  SpecUtils::EnergyCalibration *arg1 = (SpecUtils::EnergyCalibration *) 0 ;
  std::shared_ptr< SpecUtils::EnergyCalibration const > *smartarg1 = 0 ;
  std::vector< float > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const SpecUtils::EnergyCalibration > *)jarg1;
  arg1 = (SpecUtils::EnergyCalibration *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::vector< float > *) &((SpecUtils::EnergyCalibration const *)arg1)->coefficients();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SandiafSpecUtils_EnergyCalibration_deviation_pairs___(void * jarg1) {
  void * jresult ;
  SpecUtils::EnergyCalibration *arg1 = (SpecUtils::EnergyCalibration *) 0 ;
  std::shared_ptr< SpecUtils::EnergyCalibration const > *smartarg1 = 0 ;
  std::vector< std::pair< float,float > > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const SpecUtils::EnergyCalibration > *)jarg1;
  arg1 = (SpecUtils::EnergyCalibration *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::vector< std::pair< float,float > > *) &((SpecUtils::EnergyCalibration const *)arg1)->deviation_pairs();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SandiafSpecUtils_EnergyCalibration_channel_energies___(void * jarg1) {
  void * jresult ;
  SpecUtils::EnergyCalibration *arg1 = (SpecUtils::EnergyCalibration *) 0 ;
  std::shared_ptr< SpecUtils::EnergyCalibration const > *smartarg1 = 0 ;
  std::shared_ptr< std::vector< float > const > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const SpecUtils::EnergyCalibration > *)jarg1;
  arg1 = (SpecUtils::EnergyCalibration *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::shared_ptr< std::vector< float > const > *) &((SpecUtils::EnergyCalibration const *)arg1)->channel_energies();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SandiafSpecUtils_EnergyCalibration_num_channels___(void * jarg1) {
  int jresult ;
  SpecUtils::EnergyCalibration *arg1 = (SpecUtils::EnergyCalibration *) 0 ;
  std::shared_ptr< SpecUtils::EnergyCalibration const > *smartarg1 = 0 ;
  size_t result;
  
  
  smartarg1 = (std::shared_ptr< const SpecUtils::EnergyCalibration > *)jarg1;
  arg1 = (SpecUtils::EnergyCalibration *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((SpecUtils::EnergyCalibration const *)arg1)->num_channels();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SandiafSpecUtils_new_EnergyCalibration___() {
  void * jresult ;
  SpecUtils::EnergyCalibration *result = 0 ;
  
  result = (SpecUtils::EnergyCalibration *)new SpecUtils::EnergyCalibration();
  
  jresult = result ? new std::shared_ptr<  SpecUtils::EnergyCalibration >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_EnergyCalibration_set_polynomial___(void * jarg1, int jarg2, void * jarg3, void * jarg4) {
  SpecUtils::EnergyCalibration *arg1 = (SpecUtils::EnergyCalibration *) 0 ;
  size_t arg2 ;
  std::vector< float > *arg3 = 0 ;
  std::vector< std::pair< float,float > > *arg4 = 0 ;
  std::shared_ptr< SpecUtils::EnergyCalibration > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  SpecUtils::EnergyCalibration > *)jarg1;
  arg1 = (SpecUtils::EnergyCalibration *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (size_t)jarg2; 
  arg3 = (std::vector< float > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< float > const & is null", 0);
    return ;
  } 
  arg4 = (std::vector< std::pair< float,float > > *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::pair< float,float > > const & is null", 0);
    return ;
  } 
  (arg1)->set_polynomial(arg2,(std::vector< float > const &)*arg3,(std::vector< std::pair< float,float > > const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_EnergyCalibration_set_default_polynomial___(void * jarg1, int jarg2, void * jarg3, void * jarg4) {
  SpecUtils::EnergyCalibration *arg1 = (SpecUtils::EnergyCalibration *) 0 ;
  size_t arg2 ;
  std::vector< float > *arg3 = 0 ;
  std::vector< std::pair< float,float > > *arg4 = 0 ;
  std::shared_ptr< SpecUtils::EnergyCalibration > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  SpecUtils::EnergyCalibration > *)jarg1;
  arg1 = (SpecUtils::EnergyCalibration *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (size_t)jarg2; 
  arg3 = (std::vector< float > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< float > const & is null", 0);
    return ;
  } 
  arg4 = (std::vector< std::pair< float,float > > *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::pair< float,float > > const & is null", 0);
    return ;
  } 
  (arg1)->set_default_polynomial(arg2,(std::vector< float > const &)*arg3,(std::vector< std::pair< float,float > > const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_EnergyCalibration_set_full_range_fraction___(void * jarg1, int jarg2, void * jarg3, void * jarg4) {
  SpecUtils::EnergyCalibration *arg1 = (SpecUtils::EnergyCalibration *) 0 ;
  size_t arg2 ;
  std::vector< float > *arg3 = 0 ;
  std::vector< std::pair< float,float > > *arg4 = 0 ;
  std::shared_ptr< SpecUtils::EnergyCalibration > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  SpecUtils::EnergyCalibration > *)jarg1;
  arg1 = (SpecUtils::EnergyCalibration *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (size_t)jarg2; 
  arg3 = (std::vector< float > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< float > const & is null", 0);
    return ;
  } 
  arg4 = (std::vector< std::pair< float,float > > *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::pair< float,float > > const & is null", 0);
    return ;
  } 
  (arg1)->set_full_range_fraction(arg2,(std::vector< float > const &)*arg3,(std::vector< std::pair< float,float > > const &)*arg4);
}


SWIGEXPORT int SWIGSTDCALL CSharp_SandiafSpecUtils_EnergyCalibration_memmorysize___(void * jarg1) {
  int jresult ;
  SpecUtils::EnergyCalibration *arg1 = (SpecUtils::EnergyCalibration *) 0 ;
  std::shared_ptr< SpecUtils::EnergyCalibration const > *smartarg1 = 0 ;
  size_t result;
  
  
  smartarg1 = (std::shared_ptr< const SpecUtils::EnergyCalibration > *)jarg1;
  arg1 = (SpecUtils::EnergyCalibration *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((SpecUtils::EnergyCalibration const *)arg1)->memmorysize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_SandiafSpecUtils_EnergyCalibration_channel_for_energy___(void * jarg1, double jarg2) {
  double jresult ;
  SpecUtils::EnergyCalibration *arg1 = (SpecUtils::EnergyCalibration *) 0 ;
  double arg2 ;
  std::shared_ptr< SpecUtils::EnergyCalibration const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const SpecUtils::EnergyCalibration > *)jarg1;
  arg1 = (SpecUtils::EnergyCalibration *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  result = (double)((SpecUtils::EnergyCalibration const *)arg1)->channel_for_energy(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_SandiafSpecUtils_EnergyCalibration_energy_for_channel___(void * jarg1, double jarg2) {
  double jresult ;
  SpecUtils::EnergyCalibration *arg1 = (SpecUtils::EnergyCalibration *) 0 ;
  double arg2 ;
  std::shared_ptr< SpecUtils::EnergyCalibration const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const SpecUtils::EnergyCalibration > *)jarg1;
  arg1 = (SpecUtils::EnergyCalibration *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  result = (double)((SpecUtils::EnergyCalibration const *)arg1)->energy_for_channel(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_SandiafSpecUtils_EnergyCalibration_lower_energy___(void * jarg1) {
  float jresult ;
  SpecUtils::EnergyCalibration *arg1 = (SpecUtils::EnergyCalibration *) 0 ;
  std::shared_ptr< SpecUtils::EnergyCalibration const > *smartarg1 = 0 ;
  float result;
  
  
  smartarg1 = (std::shared_ptr< const SpecUtils::EnergyCalibration > *)jarg1;
  arg1 = (SpecUtils::EnergyCalibration *)(smartarg1 ? smartarg1->get() : 0); 
  result = (float)((SpecUtils::EnergyCalibration const *)arg1)->lower_energy();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_SandiafSpecUtils_EnergyCalibration_upper_energy___(void * jarg1) {
  float jresult ;
  SpecUtils::EnergyCalibration *arg1 = (SpecUtils::EnergyCalibration *) 0 ;
  std::shared_ptr< SpecUtils::EnergyCalibration const > *smartarg1 = 0 ;
  float result;
  
  
  smartarg1 = (std::shared_ptr< const SpecUtils::EnergyCalibration > *)jarg1;
  arg1 = (SpecUtils::EnergyCalibration *)(smartarg1 ? smartarg1->get() : 0); 
  result = (float)((SpecUtils::EnergyCalibration const *)arg1)->upper_energy();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SandiafSpecUtils_EnergyCalibration_sm_min_channels_get___() {
  int jresult ;
  size_t result;
  
  result = (size_t)SpecUtils::EnergyCalibration::sm_min_channels;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SandiafSpecUtils_EnergyCalibration_sm_max_channels_get___() {
  int jresult ;
  size_t result;
  
  result = (size_t)SpecUtils::EnergyCalibration::sm_max_channels;
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_SandiafSpecUtils_EnergyCalibration_sm_polynomial_offset_limit_get___() {
  float jresult ;
  float result;
  
  result = (float)(float)SpecUtils::EnergyCalibration::sm_polynomial_offset_limit;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_EnergyCalibration_check_lower_energies___(void * jarg1, int jarg2, void * jarg3) {
  SpecUtils::EnergyCalibration *arg1 = (SpecUtils::EnergyCalibration *) 0 ;
  size_t arg2 ;
  std::vector< float > *arg3 = 0 ;
  std::shared_ptr< SpecUtils::EnergyCalibration > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  SpecUtils::EnergyCalibration > *)jarg1;
  arg1 = (SpecUtils::EnergyCalibration *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (size_t)jarg2; 
  arg3 = (std::vector< float > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< float > const & is null", 0);
    return ;
  } 
  (arg1)->check_lower_energies(arg2,(std::vector< float > const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SandiafSpecUtils_EnergyCalibration_mutable_deviation_pairs___(void * jarg1) {
  void * jresult ;
  SpecUtils::EnergyCalibration *arg1 = (SpecUtils::EnergyCalibration *) 0 ;
  std::shared_ptr< SpecUtils::EnergyCalibration > *smartarg1 = 0 ;
  SpecUtils::DeviationPairs *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  SpecUtils::EnergyCalibration > *)jarg1;
  arg1 = (SpecUtils::EnergyCalibration *)(smartarg1 ? smartarg1->get() : 0); 
  result = (SpecUtils::DeviationPairs *) &(arg1)->mutable_deviation_pairs();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_EnergyCalibration_m_type_set___(void * jarg1, int jarg2) {
  SpecUtils::EnergyCalibration *arg1 = (SpecUtils::EnergyCalibration *) 0 ;
  SpecUtils::EnergyCalType arg2 ;
  std::shared_ptr< SpecUtils::EnergyCalibration > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  SpecUtils::EnergyCalibration > *)jarg1;
  arg1 = (SpecUtils::EnergyCalibration *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (SpecUtils::EnergyCalType)jarg2; 
  if (arg1) (arg1)->m_type = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SandiafSpecUtils_EnergyCalibration_m_type_get___(void * jarg1) {
  int jresult ;
  SpecUtils::EnergyCalibration *arg1 = (SpecUtils::EnergyCalibration *) 0 ;
  std::shared_ptr< SpecUtils::EnergyCalibration > *smartarg1 = 0 ;
  SpecUtils::EnergyCalType result;
  
  
  smartarg1 = (std::shared_ptr<  SpecUtils::EnergyCalibration > *)jarg1;
  arg1 = (SpecUtils::EnergyCalibration *)(smartarg1 ? smartarg1->get() : 0); 
  result = (SpecUtils::EnergyCalType) ((arg1)->m_type);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_EnergyCalibration_m_coefficients_set___(void * jarg1, void * jarg2) {
  SpecUtils::EnergyCalibration *arg1 = (SpecUtils::EnergyCalibration *) 0 ;
  std::vector< float > *arg2 = (std::vector< float > *) 0 ;
  std::shared_ptr< SpecUtils::EnergyCalibration > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  SpecUtils::EnergyCalibration > *)jarg1;
  arg1 = (SpecUtils::EnergyCalibration *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::vector< float > *)jarg2; 
  if (arg1) (arg1)->m_coefficients = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SandiafSpecUtils_EnergyCalibration_m_coefficients_get___(void * jarg1) {
  void * jresult ;
  SpecUtils::EnergyCalibration *arg1 = (SpecUtils::EnergyCalibration *) 0 ;
  std::shared_ptr< SpecUtils::EnergyCalibration > *smartarg1 = 0 ;
  std::vector< float > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  SpecUtils::EnergyCalibration > *)jarg1;
  arg1 = (SpecUtils::EnergyCalibration *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::vector< float > *)& ((arg1)->m_coefficients);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_EnergyCalibration_m_deviation_pairs_set___(void * jarg1, void * jarg2) {
  SpecUtils::EnergyCalibration *arg1 = (SpecUtils::EnergyCalibration *) 0 ;
  std::vector< std::pair< float,float > > *arg2 = (std::vector< std::pair< float,float > > *) 0 ;
  std::shared_ptr< SpecUtils::EnergyCalibration > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  SpecUtils::EnergyCalibration > *)jarg1;
  arg1 = (SpecUtils::EnergyCalibration *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::vector< std::pair< float,float > > *)jarg2; 
  if (arg1) (arg1)->m_deviation_pairs = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SandiafSpecUtils_EnergyCalibration_m_deviation_pairs_get___(void * jarg1) {
  void * jresult ;
  SpecUtils::EnergyCalibration *arg1 = (SpecUtils::EnergyCalibration *) 0 ;
  std::shared_ptr< SpecUtils::EnergyCalibration > *smartarg1 = 0 ;
  std::vector< std::pair< float,float > > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  SpecUtils::EnergyCalibration > *)jarg1;
  arg1 = (SpecUtils::EnergyCalibration *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::vector< std::pair< float,float > > *)& ((arg1)->m_deviation_pairs);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_EnergyCalibration_m_channel_energies_set___(void * jarg1, void * jarg2) {
  SpecUtils::EnergyCalibration *arg1 = (SpecUtils::EnergyCalibration *) 0 ;
  std::shared_ptr< std::vector< float > const > *arg2 = (std::shared_ptr< std::vector< float > const > *) 0 ;
  std::shared_ptr< SpecUtils::EnergyCalibration > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  SpecUtils::EnergyCalibration > *)jarg1;
  arg1 = (SpecUtils::EnergyCalibration *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::shared_ptr< std::vector< float > const > *)jarg2; 
  if (arg1) (arg1)->m_channel_energies = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SandiafSpecUtils_EnergyCalibration_m_channel_energies_get___(void * jarg1) {
  void * jresult ;
  SpecUtils::EnergyCalibration *arg1 = (SpecUtils::EnergyCalibration *) 0 ;
  std::shared_ptr< SpecUtils::EnergyCalibration > *smartarg1 = 0 ;
  std::shared_ptr< std::vector< float > const > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  SpecUtils::EnergyCalibration > *)jarg1;
  arg1 = (SpecUtils::EnergyCalibration *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::shared_ptr< std::vector< float > const > *)& ((arg1)->m_channel_energies);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_delete_EnergyCalibration___(void * jarg1) {
  SpecUtils::EnergyCalibration *arg1 = (SpecUtils::EnergyCalibration *) 0 ;
  std::shared_ptr< SpecUtils::EnergyCalibration > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  SpecUtils::EnergyCalibration > *)jarg1;
  arg1 = (SpecUtils::EnergyCalibration *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SandiafSpecUtils_energy_cal_combine_channels___(void * jarg1, int jarg2) {
  void * jresult ;
  SpecUtils::EnergyCalibration *arg1 = 0 ;
  size_t arg2 ;
  std::shared_ptr< SpecUtils::EnergyCalibration > result;
  
  
  arg1 = (SpecUtils::EnergyCalibration *)(((std::shared_ptr< const SpecUtils::EnergyCalibration > *)jarg1) ? ((std::shared_ptr< const SpecUtils::EnergyCalibration > *)jarg1)->get() : 0);
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SpecUtils::EnergyCalibration const & reference is null", 0);
    return 0;
  } 
  arg2 = (size_t)jarg2; 
  result = SpecUtils::energy_cal_combine_channels((SpecUtils::EnergyCalibration const &)*arg1,SWIG_STD_MOVE(arg2));
  jresult = result ? new std::shared_ptr< SpecUtils::EnergyCalibration >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SandiafSpecUtils_polynomial_binning___(void * jarg1, int jarg2, void * jarg3) {
  void * jresult ;
  std::vector< float > *arg1 = 0 ;
  size_t arg2 ;
  std::vector< std::pair< float,float > > *arg3 = 0 ;
  SwigValueWrapper< std::shared_ptr< std::vector< float > const > > result;
  
  arg1 = (std::vector< float > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< float > const & is null", 0);
    return 0;
  } 
  arg2 = (size_t)jarg2; 
  arg3 = (std::vector< std::pair< float,float > > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::pair< float,float > > const & is null", 0);
    return 0;
  } 
  result = SpecUtils::polynomial_binning((std::vector< float > const &)*arg1,SWIG_STD_MOVE(arg2),(std::vector< std::pair< float,float > > const &)*arg3);
  jresult = new std::shared_ptr< std::vector< float > const >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SandiafSpecUtils_fullrangefraction_binning__SWIG_0___(void * jarg1, int jarg2, void * jarg3, unsigned int jarg4) {
  void * jresult ;
  std::vector< float > *arg1 = 0 ;
  size_t arg2 ;
  std::vector< std::pair< float,float > > *arg3 = 0 ;
  bool arg4 ;
  SwigValueWrapper< std::shared_ptr< std::vector< float > const > > result;
  
  arg1 = (std::vector< float > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< float > const & is null", 0);
    return 0;
  } 
  arg2 = (size_t)jarg2; 
  arg3 = (std::vector< std::pair< float,float > > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::pair< float,float > > const & is null", 0);
    return 0;
  } 
  arg4 = jarg4 ? true : false; 
  result = SpecUtils::fullrangefraction_binning((std::vector< float > const &)*arg1,SWIG_STD_MOVE(arg2),(std::vector< std::pair< float,float > > const &)*arg3,arg4);
  jresult = new std::shared_ptr< std::vector< float > const >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SandiafSpecUtils_fullrangefraction_binning__SWIG_1___(void * jarg1, int jarg2, void * jarg3) {
  void * jresult ;
  std::vector< float > *arg1 = 0 ;
  size_t arg2 ;
  std::vector< std::pair< float,float > > *arg3 = 0 ;
  SwigValueWrapper< std::shared_ptr< std::vector< float > const > > result;
  
  arg1 = (std::vector< float > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< float > const & is null", 0);
    return 0;
  } 
  arg2 = (size_t)jarg2; 
  arg3 = (std::vector< std::pair< float,float > > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::pair< float,float > > const & is null", 0);
    return 0;
  } 
  result = SpecUtils::fullrangefraction_binning((std::vector< float > const &)*arg1,SWIG_STD_MOVE(arg2),(std::vector< std::pair< float,float > > const &)*arg3);
  jresult = new std::shared_ptr< std::vector< float > const >(result); 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_SandiafSpecUtils_fullrangefraction_energy___(double jarg1, void * jarg2, int jarg3, void * jarg4) {
  double jresult ;
  double arg1 ;
  std::vector< float > *arg2 = 0 ;
  size_t arg3 ;
  std::vector< std::pair< float,float > > *arg4 = 0 ;
  double result;
  
  arg1 = (double)jarg1; 
  arg2 = (std::vector< float > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< float > const & is null", 0);
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  arg4 = (std::vector< std::pair< float,float > > *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::pair< float,float > > const & is null", 0);
    return 0;
  } 
  result = (double)SpecUtils::fullrangefraction_energy(arg1,(std::vector< float > const &)*arg2,SWIG_STD_MOVE(arg3),(std::vector< std::pair< float,float > > const &)*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_SandiafSpecUtils_polynomial_energy___(double jarg1, void * jarg2, void * jarg3) {
  double jresult ;
  double arg1 ;
  std::vector< float > *arg2 = 0 ;
  std::vector< std::pair< float,float > > *arg3 = 0 ;
  double result;
  
  arg1 = (double)jarg1; 
  arg2 = (std::vector< float > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< float > const & is null", 0);
    return 0;
  } 
  arg3 = (std::vector< std::pair< float,float > > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::pair< float,float > > const & is null", 0);
    return 0;
  } 
  result = (double)SpecUtils::polynomial_energy(arg1,(std::vector< float > const &)*arg2,(std::vector< std::pair< float,float > > const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_SandiafSpecUtils_deviation_pair_correction___(double jarg1, void * jarg2) {
  double jresult ;
  double arg1 ;
  std::vector< std::pair< float,float > > *arg2 = 0 ;
  double result;
  
  arg1 = (double)jarg1; 
  arg2 = (std::vector< std::pair< float,float > > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::pair< float,float > > const & is null", 0);
    return 0;
  } 
  result = (double)SpecUtils::deviation_pair_correction(arg1,(std::vector< std::pair< float,float > > const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_SandiafSpecUtils_correction_due_to_dev_pairs___(double jarg1, void * jarg2) {
  double jresult ;
  double arg1 ;
  std::vector< std::pair< float,float > > *arg2 = 0 ;
  double result;
  
  arg1 = (double)jarg1; 
  arg2 = (std::vector< std::pair< float,float > > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::pair< float,float > > const & is null", 0);
    return 0;
  } 
  result = (double)SpecUtils::correction_due_to_dev_pairs(arg1,(std::vector< std::pair< float,float > > const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SandiafSpecUtils_apply_deviation_pair___(void * jarg1, void * jarg2) {
  void * jresult ;
  std::vector< float > *arg1 = 0 ;
  std::vector< std::pair< float,float > > *arg2 = 0 ;
  SwigValueWrapper< std::shared_ptr< std::vector< float > const > > result;
  
  arg1 = (std::vector< float > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< float > const & is null", 0);
    return 0;
  } 
  arg2 = (std::vector< std::pair< float,float > > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::pair< float,float > > const & is null", 0);
    return 0;
  } 
  result = SpecUtils::apply_deviation_pair((std::vector< float > const &)*arg1,(std::vector< std::pair< float,float > > const &)*arg2);
  jresult = new std::shared_ptr< std::vector< float > const >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SandiafSpecUtils_polynomial_coef_to_fullrangefraction___(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< float > *arg1 = 0 ;
  size_t arg2 ;
  std::vector< float > result;
  
  arg1 = (std::vector< float > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< float > const & is null", 0);
    return 0;
  } 
  arg2 = (size_t)jarg2; 
  result = SpecUtils::polynomial_coef_to_fullrangefraction((std::vector< float > const &)*arg1,SWIG_STD_MOVE(arg2));
  jresult = new std::vector< float >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SandiafSpecUtils_fullrangefraction_coef_to_polynomial___(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< float > *arg1 = 0 ;
  size_t arg2 ;
  std::vector< float > result;
  
  arg1 = (std::vector< float > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< float > const & is null", 0);
    return 0;
  } 
  arg2 = (size_t)jarg2; 
  result = SpecUtils::fullrangefraction_coef_to_polynomial((std::vector< float > const &)*arg1,SWIG_STD_MOVE(arg2));
  jresult = new std::vector< float >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SandiafSpecUtils_mid_channel_polynomial_to_fullrangeFraction___(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< float > *arg1 = 0 ;
  size_t arg2 ;
  std::vector< float > result;
  
  arg1 = (std::vector< float > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< float > const & is null", 0);
    return 0;
  } 
  arg2 = (size_t)jarg2; 
  result = SpecUtils::mid_channel_polynomial_to_fullrangeFraction((std::vector< float > const &)*arg1,SWIG_STD_MOVE(arg2));
  jresult = new std::vector< float >(result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SandiafSpecUtils_calibration_is_valid___(int jarg1, void * jarg2, void * jarg3, int jarg4) {
  unsigned int jresult ;
  SpecUtils::EnergyCalType arg1 ;
  std::vector< float > *arg2 = 0 ;
  std::vector< std::pair< float,float > > *arg3 = 0 ;
  size_t arg4 ;
  bool result;
  
  arg1 = (SpecUtils::EnergyCalType)jarg1; 
  arg2 = (std::vector< float > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< float > const & is null", 0);
    return 0;
  } 
  arg3 = (std::vector< std::pair< float,float > > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::pair< float,float > > const & is null", 0);
    return 0;
  } 
  arg4 = (size_t)jarg4; 
  result = (bool)SpecUtils::calibration_is_valid(arg1,(std::vector< float > const &)*arg2,(std::vector< std::pair< float,float > > const &)*arg3,SWIG_STD_MOVE(arg4));
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SandiafSpecUtils_polynomial_cal_remove_first_channels___(int jarg1, void * jarg2) {
  void * jresult ;
  int arg1 ;
  std::vector< float > *arg2 = 0 ;
  std::vector< float > result;
  
  arg1 = (int)jarg1; 
  arg2 = (std::vector< float > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< float > const & is null", 0);
    return 0;
  } 
  result = SpecUtils::polynomial_cal_remove_first_channels(arg1,(std::vector< float > const &)*arg2);
  jresult = new std::vector< float >(result); 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_SandiafSpecUtils_find_fullrangefraction_channel__SWIG_0___(double jarg1, void * jarg2, int jarg3, void * jarg4, double jarg5) {
  double jresult ;
  double arg1 ;
  std::vector< float > *arg2 = 0 ;
  size_t arg3 ;
  std::vector< std::pair< float,float > > *arg4 = 0 ;
  double arg5 ;
  double result;
  
  arg1 = (double)jarg1; 
  arg2 = (std::vector< float > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< float > const & is null", 0);
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  arg4 = (std::vector< std::pair< float,float > > *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::pair< float,float > > const & is null", 0);
    return 0;
  } 
  arg5 = (double)jarg5; 
  result = (double)SpecUtils::find_fullrangefraction_channel(arg1,(std::vector< float > const &)*arg2,SWIG_STD_MOVE(arg3),(std::vector< std::pair< float,float > > const &)*arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_SandiafSpecUtils_find_fullrangefraction_channel__SWIG_1___(double jarg1, void * jarg2, int jarg3, void * jarg4) {
  double jresult ;
  double arg1 ;
  std::vector< float > *arg2 = 0 ;
  size_t arg3 ;
  std::vector< std::pair< float,float > > *arg4 = 0 ;
  double result;
  
  arg1 = (double)jarg1; 
  arg2 = (std::vector< float > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< float > const & is null", 0);
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  arg4 = (std::vector< std::pair< float,float > > *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::pair< float,float > > const & is null", 0);
    return 0;
  } 
  result = (double)SpecUtils::find_fullrangefraction_channel(arg1,(std::vector< float > const &)*arg2,SWIG_STD_MOVE(arg3),(std::vector< std::pair< float,float > > const &)*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_SandiafSpecUtils_find_polynomial_channel__SWIG_0___(double jarg1, void * jarg2, int jarg3, void * jarg4, double jarg5) {
  double jresult ;
  double arg1 ;
  std::vector< float > *arg2 = 0 ;
  size_t arg3 ;
  std::vector< std::pair< float,float > > *arg4 = 0 ;
  double arg5 ;
  double result;
  
  arg1 = (double)jarg1; 
  arg2 = (std::vector< float > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< float > const & is null", 0);
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  arg4 = (std::vector< std::pair< float,float > > *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::pair< float,float > > const & is null", 0);
    return 0;
  } 
  arg5 = (double)jarg5; 
  result = (double)SpecUtils::find_polynomial_channel(arg1,(std::vector< float > const &)*arg2,SWIG_STD_MOVE(arg3),(std::vector< std::pair< float,float > > const &)*arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_SandiafSpecUtils_find_polynomial_channel__SWIG_1___(double jarg1, void * jarg2, int jarg3, void * jarg4) {
  double jresult ;
  double arg1 ;
  std::vector< float > *arg2 = 0 ;
  size_t arg3 ;
  std::vector< std::pair< float,float > > *arg4 = 0 ;
  double result;
  
  arg1 = (double)jarg1; 
  arg2 = (std::vector< float > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< float > const & is null", 0);
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  arg4 = (std::vector< std::pair< float,float > > *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::pair< float,float > > const & is null", 0);
    return 0;
  } 
  result = (double)SpecUtils::find_polynomial_channel(arg1,(std::vector< float > const &)*arg2,SWIG_STD_MOVE(arg3),(std::vector< std::pair< float,float > > const &)*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_rebin_by_lower_edge___(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  std::vector< float > *arg1 = 0 ;
  std::vector< float > *arg2 = 0 ;
  std::vector< float > *arg3 = 0 ;
  std::vector< float > *arg4 = 0 ;
  
  arg1 = (std::vector< float > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< float > const & is null", 0);
    return ;
  } 
  arg2 = (std::vector< float > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< float > const & is null", 0);
    return ;
  } 
  arg3 = (std::vector< float > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< float > const & is null", 0);
    return ;
  } 
  arg4 = (std::vector< float > *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< float > & is null", 0);
    return ;
  } 
  SpecUtils::rebin_by_lower_edge((std::vector< float > const &)*arg1,(std::vector< float > const &)*arg2,(std::vector< float > const &)*arg3,*arg4);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SandiafSpecUtils_write_CALp_file___(void * jarg1, void * jarg2, const char * jarg3) {
  unsigned int jresult ;
  std::ostream *arg1 = 0 ;
  std::shared_ptr< SpecUtils::EnergyCalibration const > *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::shared_ptr< SpecUtils::EnergyCalibration const > tempnull2 ;
  bool result;
  
  arg1 = (std::ostream *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::ostream & is null", 0);
    return 0;
  } 
  arg2 = jarg2 ? (std::shared_ptr< SpecUtils::EnergyCalibration const > *)jarg2 : &tempnull2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  result = (bool)SpecUtils::write_CALp_file(*arg1,(std::shared_ptr< SpecUtils::EnergyCalibration const > const &)*arg2,(std::string const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SandiafSpecUtils_remove_file___(const char * jarg1) {
  unsigned int jresult ;
  std::string *arg1 = 0 ;
  bool result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = (bool)SpecUtils::remove_file((std::string const &)*arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SandiafSpecUtils_is_file___(const char * jarg1) {
  unsigned int jresult ;
  std::string *arg1 = 0 ;
  bool result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = (bool)SpecUtils::is_file((std::string const &)*arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SandiafSpecUtils_rename_file___(const char * jarg1, const char * jarg2) {
  unsigned int jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)SpecUtils::rename_file((std::string const &)*arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SandiafSpecUtils_is_directory___(const char * jarg1) {
  unsigned int jresult ;
  std::string *arg1 = 0 ;
  bool result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = (bool)SpecUtils::is_directory((std::string const &)*arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SandiafSpecUtils_create_directory___(const char * jarg1) {
  int jresult ;
  std::string *arg1 = 0 ;
  int result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = (int)SpecUtils::create_directory((std::string const &)*arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SandiafSpecUtils_can_rw_in_directory___(const char * jarg1) {
  unsigned int jresult ;
  std::string *arg1 = 0 ;
  bool result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = (bool)SpecUtils::can_rw_in_directory((std::string const &)*arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_SandiafSpecUtils_append_path___(const char * jarg1, const char * jarg2) {
  const char * jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = SpecUtils::append_path((std::string const &)*arg1,(std::string const &)*arg2);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_SandiafSpecUtils_filename___(const char * jarg1) {
  const char * jresult ;
  std::string *arg1 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = SpecUtils::filename((std::string const &)*arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_SandiafSpecUtils_parent_path___(const char * jarg1) {
  const char * jresult ;
  std::string *arg1 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = SpecUtils::parent_path((std::string const &)*arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_SandiafSpecUtils_file_extension___(const char * jarg1) {
  const char * jresult ;
  std::string *arg1 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = SpecUtils::file_extension((std::string const &)*arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SandiafSpecUtils_file_size___(const char * jarg1) {
  int jresult ;
  std::string *arg1 = 0 ;
  size_t result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = SpecUtils::file_size((std::string const &)*arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_SandiafSpecUtils_temp_dir___() {
  const char * jresult ;
  std::string result;
  
  result = SpecUtils::temp_dir();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SandiafSpecUtils_is_absolute_path___(const char * jarg1) {
  unsigned int jresult ;
  std::string *arg1 = 0 ;
  bool result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = (bool)SpecUtils::is_absolute_path((std::string const &)*arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_SandiafSpecUtils_get_working_path___() {
  const char * jresult ;
  std::string result;
  
  result = SpecUtils::get_working_path();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_SandiafSpecUtils_temp_file_name___(const char * jarg1, const char * jarg2) {
  const char * jresult ;
  std::string arg1 ;
  std::string arg2 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg1)->assign(jarg1); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg2)->assign(jarg2); 
  result = SpecUtils::temp_file_name(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2));
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SandiafSpecUtils_sm_recursive_ls_max_depth_get___() {
  int jresult ;
  size_t result;
  
  result = (size_t)SpecUtils::sm_recursive_ls_max_depth;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SandiafSpecUtils_sm_ls_max_results_get___() {
  int jresult ;
  size_t result;
  
  result = (size_t)SpecUtils::sm_ls_max_results;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SandiafSpecUtils_recursive_ls__SWIG_0___(const char * jarg1, const char * jarg2) {
  void * jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::vector< std::string > result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = SpecUtils::recursive_ls((std::string const &)*arg1,(std::string const &)*arg2);
  jresult = new std::vector< std::string >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SandiafSpecUtils_recursive_ls__SWIG_1___(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  std::vector< std::string > result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = SpecUtils::recursive_ls((std::string const &)*arg1);
  jresult = new std::vector< std::string >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SandiafSpecUtils_recursive_ls__SWIG_2___(const char * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  std::string *arg1 = 0 ;
  SpecUtils::file_match_function_t arg2 = (SpecUtils::file_match_function_t) 0 ;
  void *arg3 = (void *) 0 ;
  std::vector< std::string > result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (SpecUtils::file_match_function_t)jarg2; 
  arg3 = (void *)jarg3; 
  result = SpecUtils::recursive_ls((std::string const &)*arg1,arg2,arg3);
  jresult = new std::vector< std::string >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SandiafSpecUtils_ls_files_in_directory__SWIG_0___(const char * jarg1, const char * jarg2) {
  void * jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::vector< std::string > result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = SpecUtils::ls_files_in_directory((std::string const &)*arg1,(std::string const &)*arg2);
  jresult = new std::vector< std::string >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SandiafSpecUtils_ls_files_in_directory__SWIG_1___(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  std::vector< std::string > result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = SpecUtils::ls_files_in_directory((std::string const &)*arg1);
  jresult = new std::vector< std::string >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SandiafSpecUtils_ls_files_in_directory__SWIG_2___(const char * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  std::string *arg1 = 0 ;
  SpecUtils::file_match_function_t arg2 = (SpecUtils::file_match_function_t) 0 ;
  void *arg3 = (void *) 0 ;
  std::vector< std::string > result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (SpecUtils::file_match_function_t)jarg2; 
  arg3 = (void *)jarg3; 
  result = SpecUtils::ls_files_in_directory((std::string const &)*arg1,arg2,arg3);
  jresult = new std::vector< std::string >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SandiafSpecUtils_ls_directories_in_directory___(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  std::vector< std::string > result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = SpecUtils::ls_directories_in_directory((std::string const &)*arg1);
  jresult = new std::vector< std::string >(result); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_SandiafSpecUtils_fs_relative___(const char * jarg1, const char * jarg2) {
  const char * jresult ;
  std::string arg1 ;
  std::string arg2 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg1)->assign(jarg1); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg2)->assign(jarg2); 
  result = SpecUtils::fs_relative(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2));
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_SandiafSpecUtils_lexically_normalize_path___(const char * jarg1) {
  const char * jresult ;
  std::string *arg1 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = SpecUtils::lexically_normalize_path((std::string const &)*arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SandiafSpecUtils_load_file_data___(char * jarg1, void * jarg2) {
  char *arg1 = (char *) (char *)0 ;
  std::vector< char > *arg2 = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (std::vector< char > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< char > & is null", 0);
    return ;
  } 
  SpecUtils::load_file_data((char const *)arg1,*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SandiafSpecUtils_likely_not_spec_file___(const char * jarg1) {
  unsigned int jresult ;
  std::string *arg1 = 0 ;
  bool result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = (bool)SpecUtils::likely_not_spec_file((std::string const &)*arg1);
  jresult = result; 
  return jresult;
}


#ifdef __cplusplus
}
#endif

